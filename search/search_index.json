{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"The Electronic Crystal Calculation Prep (ECCP) Program","text":"<p>Authors: Dr. Geoffrey Weal<sup>*,\u2020</sup>, Dr. Chayanit Wechwithayakhlung<sup>\u2020</sup>, Dr. Josh Sutton<sup>*</sup>, Dr. Daniel Packwood<sup>\u2020</sup>, Dr. Paul Hume<sup>*</sup>, Prof. Justin Hodgkiss<sup>*</sup></p> <p><sup>*</sup> Victoria University of Wellington, Wellington, New Zealand; The MacDiarmid Institute for Advanced Materials and Nanotechnology, Wellington, New Zealand. </p> <p><sup>\u2020</sup> Institute for Integrated Cell-Material Sciences (iCeMS), Kyoto University, Kyoto, Japan.</p> <p>Group pages: https://people.wgtn.ac.nz/paul.hume/grants, https://www.packwood.icems.kyoto-u.ac.jp/, https://people.wgtn.ac.nz/justin.hodgkiss/grants</p>"},{"location":"index.html#what-is-the-electronic-crystal-calculation-prep-eccp-program","title":"What is the Electronic Crystal Calculation Prep (ECCP) Program","text":"<p>The Electronic Crystal Calculation Prep (ECCP) program is designed create the <code>Gaussian</code>/<code>ORCA</code> files needed to perform DFT calculations upon the molecules in molecular crystals. The DFT calculations allow the user to calculate the electronic properties of molecules, such as:</p> <ul> <li>excited state properties, </li> <li>reorganisation energies, </li> <li>as well as electronic intermolecular properties, including electronic coupling, and exciton and charge diffusion. </li> </ul>"},{"location":"index.html#installation","title":"Installation","text":"<p>It is recommended to read the installation page before using the ECCP program. See Installation: Setting Up ECCP and Pre-Requisites Packages for more information. Note that you can install ECCP through <code>pip3</code> and <code>conda</code>. </p>"},{"location":"index.html#guide-to-using-eccp","title":"Guide To Using ECCP","text":"<p>The ECCP program is one in a series of programs that are designed to be used in the workflow shown below. After you have installed ECCP, see How To Use The ECCP Program to learn about how to use this program. </p>"},{"location":"index.html#the-grand-scheme","title":"The Grand Scheme","text":"<p>The ECCP program is used as part of a grand scheme for calculating the excited-state electronic properties of molecules in a crystal. This includes simulations of exciton and charge diffusion through crystal structures, in particular for organic molecules (but not limited to them). This scheme is shown below, along with where the ECCP program is used in this scheme. </p> <p> </p>"},{"location":"Installation.html","title":"Installation","text":"<p>In this article, we will look at how to install the ECCP program and all requisites required for this program.</p>"},{"location":"Installation.html#pre-requisites","title":"Pre-requisites","text":""},{"location":"Installation.html#python-3-and-pip3","title":"Python 3 and <code>pip3</code>","text":"<p>This program is designed to work with Python 3. This program can only be used with Python 3.7. This is because the CSD Python API can only run using Python 3.7. </p> <p>To find out if you have Python 3 on your computer and what version you have, type into the terminal</p> <pre><code>python --version\n</code></pre> <p>If you have Python 3 on your computer, you will get the version of python you have on your computer. E.g.</p> <pre><code>user@computer_name path % python --version\nPython 3.7.9\n</code></pre> <p>If you have Python 3, you may have <code>pip</code> installed on your computer as well. <code>pip</code> is a python package installation tool that is recommended by Python for installing Python packages. To see if you have <code>pip</code> installed, type into the terminal</p> <p><pre><code>pip list\n</code></pre> If you get back a list of python packages install on your computer, you have <code>pip</code> installed. E.g.</p> <pre><code>user@computer_name Documentation % pip3 list\nPackage                       Version\n----------------------------- ---------\nalabaster                     0.7.12\nasap3                         3.11.10\nase                           3.20.1\nBabel                         2.8.0\ncertifi                       2020.6.20\nchardet                       3.0.4\nclick                         7.1.2\ncycler                        0.10.0\ndocutils                      0.16\nFlask                         1.1.2\nidna                          2.10\nimagesize                     1.2.0\nitsdangerous                  1.1.0\nJinja2                        2.11.2\nkiwisolver                    1.2.0\nMarkupSafe                    1.1.1\nmatplotlib                    3.3.1\nnumpy                         1.19.1\npackaging                     20.4\nPillow                        7.2.0\npip                           20.2.4\nPygments                      2.7.1\npyparsing                     2.4.7\npython-dateutil               2.8.1\npytz                          2020.1\nrequests                      2.24.0\nscipy                         1.5.2\nsetuptools                    41.2.0\nsix                           1.15.0\nsnowballstemmer               2.0.0\nSphinx                        3.2.1\nsphinx-pyreverse              0.0.13\nsphinx-rtd-theme              0.5.0\nsphinx-tabs                   1.3.0\nsphinxcontrib-applehelp       1.0.2\nsphinxcontrib-devhelp         1.0.2\nsphinxcontrib-htmlhelp        1.0.3\nsphinxcontrib-jsmath          1.0.1\nsphinxcontrib-plantuml        0.18.1\nsphinxcontrib-qthelp          1.0.3\nsphinxcontrib-serializinghtml 1.1.4\nsphinxcontrib-websupport      1.2.4\nurllib3                       1.25.10\nWerkzeug                      1.0.1\nwheel                         0.33.1\nxlrd                          1.2.0\n</code></pre> <p>If you do not see this, you probably do not have <code>pip</code> installed on your computer. If this is the case, check out PIP Installation. </p> <p>Note</p> <p>In most cases, <code>pip</code> and <code>pip3</code> are synonymous for the Python Installation Package for Python 3. However in some cases, <code>pip</code> will be directed to the Python Installation Package for Python 2 rather than Python 3. To check this, run in the terminal:</p> <pre><code>pip --version\n</code></pre> <p>If the output indicates you this Python Installation Package is for Python 2 and not Python 3, only install packages using the <code>pip3</code> name. </p> <p>For the rest of this documentation, <code>pip</code> will be used, however if your computer's <code>pip</code>  refers to Python 2 and not Python 3, use <code>pip3</code>  instead of <code>pip</code>. </p>"},{"location":"Installation.html#atomic-simulation-environment-ase","title":"Atomic Simulation Environment (ASE)","text":"<p>The ECCP program uses the Atomic Simulation Environment (ASE) to read in the crystal data from various file format, to process the crystals, and to save the the crystals to disk. Read more about ASE here. </p> <p>The installation of ASE can be found on the ASE installation page, however from experience if you are using ASE for the first time, it is best to install ASE using <code>pip</code>, the package manager that is an extension of python to keep all your program easily managed and easy to import into your python. </p> <p>To install ASE using <code>pip</code>, perform the following in your terminal.</p> <pre><code>pip install --upgrade --user ase\n</code></pre> <p>Installing using <code>pip</code> ensures that ASE is being installed to be used by Python 3, and not Python 2. Installing ASE like this will also install all the requisite program needed for ASE. This installation includes the use of features such as viewing the xyz files of structure and looking at ase databases through a website. These should be already assessible, which you can test by entering into the terminal:</p> <pre><code>ase gui\n</code></pre> <p>This should show a GUI with nothing in it, as shown below.</p> This is a blank ase gui screen that you would see if enter ase gui into the terminal. <p>However, in the case that this does not work, we need to manually add a path to your <code>~/.bashrc</code> so you can use the ASE features externally outside python. Do the following; first enter the following into the terminal:</p> <pre><code>pip show ase\n</code></pre> <p>This will give a bunch of information, including the location of ase on your computer. For example, when I do this I get:</p> <pre><code>user@computer_name docs % pip show ase\nName: ase\nVersion: 3.20.1\nSummary: Atomic Simulation Environment\nHome-page: https://wiki.fysik.dtu.dk/ase\nAuthor: None\nAuthor-email: None\nLicense: LGPLv2.1+\nLocation: /Users/geoffreyweal/Library/Python/3.7/lib/python/site-packages\nRequires: matplotlib, scipy, numpy\nRequired-by: \n</code></pre> <p>Copy the <code>Location</code> line. If we remove the <code>lib/python/site-packages</code> bit and replace it with <code>bin</code>, this gives us the location of useful ASE programs. The example below is for Python 3.7. </p> <pre><code>/Users/geoffreyweal/Library/Python/3.7/bin\n</code></pre> <p>Next, add this to your <code>~/.bashrc</code> file as below:</p> <pre><code>############################################################\n# For ASE\nexport PATH=/Users/geoffreyweal/Library/Python/3.7/bin:$PATH\n############################################################\n</code></pre> <p>Write <code>source ~/.bashrc</code> in the terminal and press enter. Once you have done this, try to run <code>ase gui</code> in the terminal. This will hopefully show the ase gui and allow you to access the useful ASE programs through the terminal. </p>"},{"location":"Installation.html#networkx","title":"Networkx","text":"<p><code>Networkx</code> is a python program that is used in the ECCP program to describe the bonding structure between atoms in the crystal structure. The easiest way to install <code>Networkx</code> is though <code>pip</code>. Type the following into the terminal:</p> <pre><code>pip3 install --upgrade --user networkx\n</code></pre>"},{"location":"Installation.html#pymatgen","title":"Pymatgen","text":"<p><code>Pymatgen</code> is a python program that is used in the ECCP program to determine symmetric molecules within a crystal structure. The easiest way to install <code>Pymatgen</code> is though <code>pip</code>. Type the following into the terminal:</p> <pre><code>pip install --upgrade --user pymatgen\n</code></pre> <p>This package and other required packages may take a bit of time to install. </p>"},{"location":"Installation.html#packaging","title":"Packaging","text":"<p>The <code>packaging</code> program is also used in this program to check the versions of ASE that you are using for compatibility issues. The easiest way to install <code>packaging</code> is though <code>pip</code>. Type the following into the terminal:</p> <pre><code>pip3 install --upgrade --user packaging\n</code></pre>"},{"location":"Installation.html#sumelf","title":"SUMELF","text":"<p>The <code>SUMELF</code> program contains several methods that are used by multiple programs in the grand scheme to obtain exciton and charge diffusion in crystals. The easiest way to install <code>SUMELF</code> is though <code>pip</code>. Type the following into the terminal:</p> <pre><code>pip3 install --upgrade --user SUMELF\n</code></pre> <p>However, there are other ways to install the <code>SUMELF</code> program. See the SUMELF Installation webpage for more information. </p>"},{"location":"Installation.html#tqdm","title":"TQDM","text":"<p>The <code>tqdm</code> program is used by this program to provide progress bars that are useful for easily monitoring progress during this program. The easiest way to install <code>tqdm</code> is though <code>pip</code>. Type the following into the terminal:</p> <pre><code>pip3 install --upgrade --user tqdm\n</code></pre>"},{"location":"Installation.html#xlsxwriter","title":"Xlsxwriter","text":"<p>The <code>xlsxwriter</code> program is used by this program to write results to Excel spreadsheets for the user to analyse information. The easiest way to install <code>xlsxwriter</code> is though <code>pip</code>. Type the following into the terminal:</p> <pre><code>    pip install --upgrade --user xlsxwriter\n</code></pre>"},{"location":"Installation.html#multiwfn","title":"Multiwfn","text":"<p>Multiwfn is a program that is designed to determine the charge of atoms in a molecule from a <code>.wfn</code> file obtained from Gaussian. This program is required if you are wanting to perform Atomic Transition Charge (ATC) calculations. To install this program in a Unix based operating system (Unix or MacOS):</p> <ol> <li>Download <code>3.7/Multiwfn_3.7_bin_Linux_noGUI.zip</code> from https://mega.nz/folder/HVcjECZS#rGG6dCO57AwpdCgYaQ3apg</li> <li>Unzip it in the place you want to hold it on your computer on on the computer cluster.</li> <li>Write <code>pwd</code> into the terminal where you unzipped the file (for example: <code>/nfs/home/wealge/Multiwfn/Multiwfn_3.7_bin_Linux_noGUI</code>)</li> <li>Change the permission of the contents of this folder to <code>777</code> (for example: <code>chmod -R 777 /nfs/home/wealge/Multiwfn/Multiwfn_3.7_bin_Linux_noGUI</code>)</li> <li>Write the following into your bashrc file (by writing <code>vim ~/.bashrc</code> into the terminal):</li> </ol> <p>To add into your bashrc</p> <p><pre><code>###################################\n# Multiwfn stuff\nexport KMP_STACKSIZE=200M\nulimit -s unlimited\n\nexport Multiwfnpath='WRITE/HERE/THE_PATH_TO_YOUR_Multiwfn_DIRECTORY'\nexport PATH=$Multiwfnpath:$PATH\n###################################\n</code></pre> For example:</p> <pre><code>###################################\n# Multiwfn stuff\nexport KMP_STACKSIZE=200M\nulimit -s unlimited\n\nexport Multiwfnpath='/nfs/home/wealge/Multiwfn/Multiwfn_3.8_dev_bin_Linux_noGUI'\nexport PATH=$Multiwfnpath:$PATH\n###################################\n</code></pre> <ol> <li>Source the bashrc file (by writing <code>source ~/.bashrc</code> into the terminal)</li> </ol> <p>To check that you can run this program in the terminal write <code>cd</code> in the terminal, and then write <code>Multiwfn</code> in the terminal. If the program is working, the <code>Multiwfn</code> will begin and you will see the following message:</p> <pre><code>Multiwfn -- A Multifunctional Wavefunction Analyzer\nVersion 3.8(dev), release date: 2022-Apr-2\nDeveloper: Tian Lu (Beijing Kein Research Center for Natural Sciences)\nBelow paper ***MUST BE CITED*** if Multiwfn is utilized in your work:\n        Tian Lu, Feiwu Chen, J. Comput. Chem., 33, 580-592 (2012)\nSee \"How to cite Multiwfn.pdf\" in Multiwfn binary package for more information\nMultiwfn official website: http://sobereva.com/multiwfn\nMultiwfn English forum: http://sobereva.com/wfnbbs\nMultiwfn Chinese forum: http://bbs.keinsci.com/wfn\n</code></pre> <p>To cancel out of this, type <code>ctrl + c</code> or <code>ctrl + z</code> into the terminal and this should exit out of the program.</p> <p>See http://sobereva.com/multiwfn/ and the <code>Multiwfn_3.8_dev.pdf</code> file in https://mega.nz/folder/HVcjECZS#rGG6dCO57AwpdCgYaQ3apg (Chapter 2.1.2) for more information about how to install Multiwfn on your system.</p> <p>Warning</p> <p>The authors of Multiwfn may have change the filename of <code>Multiwfn</code> to <code>Multiwfn_noGUI</code>. Geoff needs to check what to do about this. </p>"},{"location":"Installation.html#setting-up-the-eccp-program","title":"Setting up the ECCP Program","text":"<p>There are three ways to install ECCP on your system. These ways are described below:</p>"},{"location":"Installation.html#install-eccp-through-pip3","title":"Install ECCP through <code>pip3</code>","text":"<p>To install the ECCP program using <code>pip3</code>, perform the following in your terminal:</p> <pre><code>pip3 install --upgrade --user git+https://github.com/geoffreyweal/ECCP.git\n</code></pre> <p>To install all related programs at the same time, performing the following in your terminal: </p> <pre><code>pip3 install --upgrade --user git+https://github.com/geoffreyweal/SUMELF.git git+https://github.com/geoffreyweal/ACSD.git git+https://github.com/geoffreyweal/ReCrystals.git git+https://github.com/geoffreyweal/RSGC.git git+https://github.com/geoffreyweal/ReJig.git git+https://github.com/geoffreyweal/ECCP.git git+https://github.com/geoffreyweal/EKMC.git git+https://github.com/geoffreyweal/SORE.git\n</code></pre>"},{"location":"Installation.html#install-eccp-through-conda","title":"Install ECCP through <code>conda</code>","text":"<p>You can install the ECCP program on <code>conda</code> through <code>pip</code>. Click here to see more information about installing ECCP through <code>conda</code>.</p>"},{"location":"Installation.html#manual-installation","title":"Manual installation","text":"<p>First, download the ECCP program to your computer. You can do this by cloning a version of this from Github, or obtaining a version of the program from the authors. If you are obtaining this program via Github, you want to <code>cd</code> to the directory that you want to place this program in on the terminal, and then clone the program from Github through the terminal as well: </p> <pre><code>cd PATH/TO/WHERE_YOU_WANT_TO_PLACE_ECCP_ON_YOUR_COMPUTER\ngit clone https://github.com/geoffreyweal/ECCP\n</code></pre> <p>Second, you need to change permissions to use this program by using <code>chmod</code>. In the terminal write:</p> <pre><code>chmod -R 777 ECCP\n</code></pre> <p>Third, you will want to add a python path for the ASCD program to the <code>~/.bashrc</code> to indicate its location. You can do this by entering the following into the terminal and clicking enter:</p> <pre><code>echo '\n###################################\n# Used for the ECCP Program\nexport PATH_TO_ECCP=\"'$PWD'/ECCP\" \nexport PYTHONPATH=\"$PATH_TO_ECCP\":$PYTHONPATH\nexport PATH=\"$PATH_TO_ECCP\"/bin:$PATH\nexport PATH=\"$PATH_TO_ECCP\"/ECCP/Subsidiary_Programs:$PATH\n###################################\n' &gt;&gt; ~/.bashrc\n</code></pre> <p>You can check that this has been entered into your <code>~/.bashrc</code> file by typing <code>vim ~/.bashrc</code> into the terminal, and scrolling down to the bottom of the terminal. </p> <p>Tip</p> <p>Make sure that the path given to <code>PATH_TO_ECCP</code> is the correct path to the ECCP folder. </p> <p>Finally, source your <code>~/.bashrc</code> file by typing the following into the terminal and pressing the enter button:</p> <pre><code>source ~/.bashrc\n</code></pre> <p>Once you have run <code>source ~/.bashrc</code>, the ECCP program should be all ready to go! You can check this by typing the following into the terminal:</p> <pre><code>which ECCP\n</code></pre> <p>This should give you the path to the ECCP program. If the terminal tells you it can not find this program, check that the path you gave for <code>PATH_TO_ECCP</code> is the correct path to the ECCP folder. </p>"},{"location":"Installation.html#summary-of-bashrc-input","title":"Summary of <code>~/.bashrc</code> input","text":"<p>You want to have the following in your <code>~/.bashrc</code>:</p> <pre><code>###################################\n# Used for the ECCP Program\nexport PATH_TO_ECCP=\"&lt;Path_to_ECCP&gt;\" \nexport PYTHONPATH=\"$PATH_TO_ECCP\":$PYTHONPATH\nexport PATH=\"$PATH_TO_ECCP\"/bin:$PATH\nexport PATH=\"$PATH_TO_ECCP\"/ECCP/Subsidiary_Programs:$PATH\n###################################\n</code></pre> <p>where <code>\"&lt;Path_to_ECCP&gt;\"</code> is the directory path that you place the ECCP program. You can find this by changing directory (<code>cd</code>) into the ECCP folder and typing <code>pwd</code> into the terminal. This will give you the full path to the ECCP program. </p>"},{"location":"Troubleshooting.html","title":"Issues and Troubleshooting","text":"<p>The following page includes some of the issues I have faced in using the ECCP program and some of the tips and troubleshooting advice for overcoming various difficulties. </p> <p>None so far</p>"},{"location":"Troubleshooting.html#other-issues","title":"Other Issues","text":"<p>This program is definitely a \"work in progress\". I have made it as easy to use as possible, but there are always oversights to program development and some parts of it may not be as easy to use as it could be. </p> <p>If you have any issues with the program or you think there would be better/easier ways to use and implement things in the ECCP program, write a message on the ECCP Github Issues page. Feedback is very much welcome!</p>"},{"location":"ECCP_Output_and_Running_DFT_Calculations/Output_From_The_ECCP_Program.html","title":"Outputs from the Electronic Crystal Calculation Prep program","text":"<p>The Electronic Crystal Calculation Prep program will create three to five folders. These are: </p> <p>General files are placed in:</p> <ul> <li><code>ECCP_Data</code>: This contains all the information about molecules and dimers in the crystal, as well as the xyz files of molecules and dimers. </li> </ul> <p>Atomic Transition Charge (ATC) files are placed in:</p> <ul> <li><code>All_ATC_Calc_Jobs</code>: This folder contains the ATC Gaussian/ORCA files of all the molecules in the crystal. These files are created in case you need to look through them, but you don't necessarily need to run these in Gaussian/ORCA. </li> <li><code>Unique_ATC_Calc_Jobs</code>: This folder contains the ATC Gaussian/ORCA files of just the structurally unique molecules in the crystal. These are the files you want to run in Gaussian/ORCA. </li> </ul> <p>Reorganisation energy (RE) files are placed in:</p> <ul> <li><code>All_RE_Calc_Jobs</code>: This folder contains the RE Gaussian/ORCA files of all the molecules in the crystal. These files are created in case you need to look through them, but you don't necessarily need to run these in Gaussian/ORCA. </li> <li><code>Unique_RE_Calc_Jobs</code>: This folder contains the RE Gaussian/ORCA files of just the conformationally unique molecules in the crystal. These are the files you want to run in Gaussian/ORCA. </li> </ul> <p>Franck-Condon and Huang-Rhys factors (FC/HR) files are placed in:</p> <ul> <li><code>All_FC_Calc_Jobs</code>: This folder contains the FC/HR Gaussian/ORCA files of all the molecules in the crystal. These files are created in case you need to look through them, but you don't necessarily need to run these in Gaussian/ORCA. </li> <li><code>Unique_FC_Calc_Jobs</code>: This folder contains the FC/HR Gaussian/ORCA files of just the conformationally unique molecules in the crystal. These are the files you want to run in Gaussian/ORCA. </li> </ul> <p>Electronic Energy Transfer (EET) files are placed in:</p> <ul> <li><code>All_EET_Calc_Jobs</code>: This folder contains the EET Gaussian/ORCA files of all the dimers in the crystal. These files are created in case you need to look through them, but you don't necessarily need to run these in Gaussian/ORCA. </li> <li><code>Unique_EET_Calc_Jobs</code>: This folder contains the EET Gaussian/ORCA files of just the structurally unique dimers in the crystal. These are the files you want to run in Gaussian/ORCA. </li> </ul> <p>Eigendata files that is used to obtain Intermolecular Charge Transfer (ICT) energies are placed in:</p> <ul> <li><code>All_Eigendata_Calc_Jobs</code>: This folder contains the Gaussian/ORCA files of all the dimers in the crystal for obtaining molecular orbtial (MO) energies, coefficients, and overlap matrices for dimers and their associated monomers. These files are created in case you need to look through them, but you don't necessarily need to run these in Gaussian/ORCA. </li> <li><code>Unique_Eigendata_Calc_Jobs</code>: This folder contains the Gaussian/ORCA files of just the structurally unique dimers in the crystal for obtaining molecular orbtial (MO) energies, coefficients, and overlap matrices for dimers and their associated monomers. These are the files you want to run in Gaussian/ORCA. </li> </ul>"},{"location":"ECCP_Output_and_Running_DFT_Calculations/Output_From_The_ECCP_Program.html#files-in-the-eccp_information-folder","title":"Files in the <code>ECCP_Information</code> folder","text":"<p>The folder called <code>ECCP_Information</code> contains all the information about molecules and dimers in the crystal, as well as the xyz files of molecules and dimers. The files included in this folder include: </p> <ul> <li><code>All_Dimer_Information.txt</code>: This file contains information about all the dimers that were found in the crystal, including the molecules in the dimer and how they are positioned relative to one another in the unit cell. </li> <li><code>Unique_Dimer_Information.txt</code>: This file includes which equivalent dimers are the same as which unique dimers. This may not contain all the unique dimers in it, as it only assigns equivalent dimers to unique dimers. </li> <li><code>crystal.xyz</code>: The original crystal in xyz format. Name given will be the same as the crystal file name given to Electronic_Crystal_Calculation_Prep.</li> <li><code>human_friendly_crystal_small.xyz</code>: The crystal in a version that makes it easier to view and understand the crystal packing in the crystal. This is a smaller version of this view. </li> <li><code>human_friendly_crystal_large.xyz</code>: The crystal in a version that makes it easier to view and understand the crystal packing in the crystal. This is a larger version of this view. </li> <li><code>All_Molecules</code>: This is a folder containing all the molecules found in the crystal. </li> <li><code>Unique_Molecules</code>: This is a folder containing all the unique molecules found in the crystal. </li> <li><code>All_Dimers</code>: This is a folder containing all the dimers found in the crystal. </li> <li><code>Unique_Dimers</code>: This is a folder containing all the unique dimers found in the crystal. </li> </ul>"},{"location":"ECCP_Output_and_Running_DFT_Calculations/Output_From_The_ECCP_Program.html#files-in-the-atc-eet-and-eigendata-folders","title":"Files in the ATC, EET, and Eigendata folders","text":"<p>These folders contain two files in them. These are:</p> <ul> <li> <p>An input file  that contain all the information about the molecule or the dimer to run. This is either:</p> <ul> <li>Gaussian input file (<code>.gjf</code>), or a</li> <li>ORCA input file (<code>.inp</code>)</li> </ul> </li> <li> <p><code>submit.sl</code>: This is the submission file requires to submit the gaussian job to slurm. </p> </li> </ul>"},{"location":"ECCP_Output_and_Running_DFT_Calculations/Output_From_The_ECCP_Program.html#files-in-the-re-folders","title":"Files in the RE folders","text":"<p>These folders contain a few files. </p> <p>In the <code>ground_structure</code> folder will be:</p> <ul> <li><code>GS_GS_PM6.gjf</code>: The Gaussian file that contain information about how to optimise your molecule to the ground state structure. This initial calculation will be perform using the PM6 force field. This calculation is performed before the resulting optimised structure is further optimised with your intended functional. Optimising the structure using the PM6 force field initially saves computational time. </li> <li><code>GS_GS_submit.sl</code>: File to submit the <code>GS_GS.gjf</code> Gaussian file to slurm.</li> <li><code>GS_GS_freq_submit.sl</code>: File to submit the <code>GS_GS_freq.gjf</code> Gaussian file to slurm.</li> <li><code>GS_ES_submit.sl</code>: File to submit the <code>GS_ES.gjf</code> Gaussian file to slurm.</li> </ul> <p>During the course of calculation, the following files will be created:</p> <ul> <li><code>GS_GS.gjf</code>: The Gaussian file that contain information about how to optimise your molecule to the ground state structure. This calculation will be performed using the functional you intended to use. </li> <li><code>GS_GS_freq.gjf</code>: This Gaussian file contains information for performing a frequency calculation upon the ground state. </li> <li><code>GS_ES.gjf</code>: This Gaussian file contains information for performing a single point calculation of the excited state of your molecule with the ground state structure. </li> </ul> <p>In the <code>excited_structure</code> folder will be:</p> <ul> <li><code>ES_ES_PM6.gjf</code>: The Gaussian file that contain information about how to optimise your molecule to the excited state structure. This initial calculation will be perform using the PM6 force field. This calculation is performed before the resulting optimised structure is further optimised with your intended functional. Optimising the structure using the PM6 force field initially saves computational time. </li> <li><code>ES_ES_submit.sl</code>: File to submit the <code>ES_ES.gjf</code> Gaussian file to slurm.</li> <li><code>ES_ES_freq_submit.sl</code>: File to submit the <code>ES_ES_freq.gjf</code> Gaussian file to slurm.</li> <li><code>ES_GS_submit.sl</code>: File to submit the <code>ES_GS.gjf</code> Gaussian file to slurm.</li> </ul> <p>During the course of calculation, another file will be created:</p> <ul> <li><code>ES_ES.gjf</code>: The Gaussian file that contain information about how to optimise your molecule to the excited state structure. This calculation will be performed using the functional you intended to use. </li> <li><code>ES_ES_freq.gjf</code>: This Gaussian file contains information for performing a frequency calculation on the excited state structure. </li> <li><code>ES_GS.gjf</code>: This Gaussian file contains information for performing a single point calculation of the ground state of your molecule with the excited state structure. </li> </ul>"},{"location":"ECCP_Output_and_Running_DFT_Calculations/Output_From_The_ECCP_Program.html#files-in-the-fc-folders","title":"Files in the FC folders","text":"<p>These folders contain two files in them. These are:</p> <ul> <li>A Gaussian input file (<code>FC.gjf</code>) that contain all the information and commands needed to obtain Franck-Condon and Huang-Rhys factors. </li> <li><code>FC_submit.sl</code>: This is the submission file requires to submit the gaussian job to slurm. </li> </ul> <p>NOTE: During this job, the <code>freq_gaussian.chk</code> checkpoint files obtained during the reorganisation energies will be moved from the <code>ground_structure</code> and <code>excited_structure</code> folders, into the franck-condon folder and renamed as <code>GS_gaussian.chk</code> and <code>ES_gaussian.chk</code>, respectively. This is performed by the <code>copy_checkpoint_files_for_franck_condon_calculation.py</code> program that you will see is performed during the <code>FC_submit.sl</code> job. </p>"},{"location":"ECCP_Output_and_Running_DFT_Calculations/Postprocessing_Data.html","title":"Post-processing programs that are available in the ECCP program","text":"<p>There are a few programs that you can run after you have submitted atomic transition charge (ATC), reorganisation energy (RE), electronic energy transfer (EET), eigendata, and intermolecular charge transfer (ICT) calculations to slurm. These are:</p> <ul> <li><code>ECCP submit</code>: For submitting Gaussian jobs to your slurm computer cluster.</li> <li><code>ECCP submit_multiwfn</code>: For submitting Multiwfn jobs once your ATC gaussian jobs have finished. </li> <li><code>ECCP did_complete</code>: Check if jobs have completed successfully or not.</li> <li><code>ECCP reset</code>: For resuming reorganisatino calculations if they did not completed in the allotted time.</li> <li><code>ECCP process_RE</code>: For obtaining results from the reorganisation energy calculations.</li> <li><code>ECCP process_EET</code>: For obtaining result from the electronic energy transfer calculations.</li> <li><code>ECCP process_ICT</code>: For obtaining result from the intermolecular charge transfer calculations.</li> <li><code>ECCP process_Eigendata</code>: For solely obtaining matrix files from Eigendata jobs. </li> <li><code>ECCP tidy</code>: For removing unnecessary files that are not needed anymore and take up a lot of hard disk space. </li> </ul> <p>These programs are described in more detail below.</p>"},{"location":"ECCP_Output_and_Running_DFT_Calculations/Postprocessing_Data.html#eccp-submit-submitting-gaussian-jobs-to-slurm","title":"<code>ECCP submit</code>: Submitting Gaussian jobs to slurm","text":"<p>It is possible to get the ECCP to submit all the Gaussian jobs to slurm automatically. </p> <p>To use <code>ECCP submit</code>, you want to move into the parent folder that contains all the subdirectories of ECCP Gaussian jobs you want to submit to slurm. For example, if you have a bunch of EET calculations you would like to submit, you would want to move into the <code>Unique_EET_Gaussian_Jobs</code> before running <code>ECCP submit</code>:</p> <pre><code>cd path/to/parent/folder\n</code></pre> <p>Once you are in the parent folder you want to submit ECCP Gaussian jobs for, type <code>ECCP submit</code> into the terminal. </p> <pre><code>ECCP submit\n</code></pre> <p>When you run <code>ECCP submit</code> on this folder in the terminal, ECCP will look through all the subdirectories in search of slurm submit files, specifically those called <code>submit.sl</code> or one of the reorganisation energy submit files (<code>eGS_gGS_main_opt_submit.sl</code> , <code>eGS_gGS_refine_opt_submit.sl</code>, <code>eGS_gGS_freq_submit.sl</code>, <code>eES_gGS_submit.sl</code>, <code>eES_gES_main_opt_submit.sl</code>, <code>eES_gES_refine_opt_submit.sl</code>, <code>eES_gES_freq_submit.sl</code>, <code>eGS_gES_submit.sl</code>). For reorganisation energy calculations, only the appropriate submit file will be submitted for the ground and excited state calculations. </p>"},{"location":"ECCP_Output_and_Running_DFT_Calculations/Postprocessing_Data.html#eccp-mass_submit_multiwfn-submitting-multiwfn-atc-jobs-manually","title":"<code>ECCP mass_submit_multiwfn</code>: Submitting MultiWFN ATC jobs manually","text":"<p>When running ATC jobs, the <code>ECCP</code> program will first run Gaussian on the <code>input.gjf</code> file (containing the molecules you want to obtain ATC results for). Once this calculation has finished, it will then run the MultiWFN program on the <code>.wfn</code> file that is created by Gaussian automatically. However, if an issue arises that stops MultiWFN from running, it is still possible to run MultiWFN on slurm by submitting the associated <code>submit_multiwfn.sl</code> file to slurm: </p> <pre><code>cd path/to/atc/submit_multiwfn/file\nsbatch submit_multiwfn.sl\n</code></pre> <p>This will run the MultiWFN program as long as the <code>.wfn</code> file exists for that job. </p> <p>You can also mass submit all these file by typing <code>ECCP mass_submit_multiwfn</code> in to the terminal. </p> <pre><code>cd path/to/ATC/jobs\nECCP mass_submit_multiwfn\n</code></pre> <p>This will search within the subdirectories for <code>submit_multiwfn.sl</code> files, which it will then submit to slurm. </p>"},{"location":"ECCP_Output_and_Running_DFT_Calculations/Postprocessing_Data.html#eccp-did_complete-checking-which-jobs-have-completed-successfully","title":"<code>ECCP did_complete</code>: Checking which jobs have completed successfully","text":"<p>You can check which gaussian jobs have finished successfully and which jobs have not finished successfully by typing <code>ECCP did_complete</code> into the terminal. <code>ECCP</code> will go through all the folders and will look for <code>output.log</code> files. It will then look through these files for key words that indicate the job has completed successfully, whether that be ATC, RE, EET, or Eigendata (ICT) calculations. To do this, move into the folder that contains your jobs and  run <code>ECCP did_complete</code> in the terminal: </p> <pre><code>cd path/to/gaussian/jobs\nECCP did_complete\n</code></pre>"},{"location":"ECCP_Output_and_Running_DFT_Calculations/Postprocessing_Data.html#eccp-reset-resetting-unfinished-reorganisation-energy-calculation-for-resubmission-to-slurm","title":"<code>ECCP reset</code>: Resetting unfinished reorganisation energy calculation for resubmission to slurm","text":"<p>Some of your Gaussian calculations may not complete or, in the case of reorganisation energy calculations, you may need to reset your geometry optimisations so you can restart a Gaussian jobs that may have timed our. It is possible to reset all the files in your ECCP folders (or setup your reorganisation energy calculations to resume geometry optimisation calculations) so that you can submit them all to slurm without manually doing anything using <code>ECCP submit</code>. </p> <p>To run this program, move into the panret folder that contains your jobs and run <code>ECCP reset</code> in the terminal: </p> <pre><code>cd path/to/gaussian/jobs\nECCP reset\n</code></pre> <p><code>ECCP reset</code> will move through all the subdirectories for uncompleted jobs to reset. </p> <p>IMPORTANT</p> <p>Make sure that there are no jobs currently running in slurm before you use this program. Cancel any running slurm jobs before running <code>ECCP reset</code> in the parent folder of these currently running jobs. </p> <p>Note</p> <p>This program WILL NOT modify any files or folders that have successfully finished geometry optimisations. You can run it from any folder, and it will only modify subdirectories that have not completed. </p> <p>For reorganisation energy geometry optimisation jobs, <code>ECCP reset</code> will look to see if the checkpoint file for the job exists. If it does, it will use this to resume the geometry optimisation, as this contains the initial SCF data which can save time initially for optimisations. If the checkpoint file does not exist or it can not be used for some reason, the checkpoint file will not be used and instead the last geometry the calculation optimisation to will be taken from the Gaussian output <code>log</code> file. </p> <p>Once you have run this program, you can resubmit jobs for resuming reorganisation energy calculations using the <code>ECCP submit</code> command.</p>"},{"location":"ECCP_Output_and_Running_DFT_Calculations/Postprocessing_Data.html#processing-results-of-atomic-transition-charge-gaussian-jobs-using-eccp-process_atc","title":"Processing results of atomic transition charge Gaussian jobs using <code>ECCP process_ATC</code>","text":"<p>To do</p>"},{"location":"ECCP_Output_and_Running_DFT_Calculations/Postprocessing_Data.html#processing-results-of-reorganisation-energy-gaussian-jobs-using-eccp-process_re","title":"Processing results of reorganisation energy Gaussian jobs using <code>ECCP process_RE</code>","text":"<p>To do</p>"},{"location":"ECCP_Output_and_Running_DFT_Calculations/Postprocessing_Data.html#processing-results-of-electronic-energy-transfer-jobs-using-eccp-process_eet","title":"Processing results of Electronic Energy Transfer jobs using <code>ECCP process_EET</code>","text":"<p>It is possible for this program to process the electronic coupling results from Gaussian jobs and present the results in text and in an excel spreadsheet. If the Gaussian job runs successfully, it will give a <code>output.log</code> file that contains values for the electronic coupling between the molecules in the dimer using the EET method in Gaussian. To do this, move into your <code>Unique_EET_Gaussian_Jobs</code> folder and run <code>ECCP process_EET</code> by typing into the terminal: </p> <pre><code>cd Unique_EET_Gaussian_Jobs\nECCP process_EET\n</code></pre> <p>This method will go through all the folders in <code>Unique_EET_Gaussian_Jobs</code> and extract the data from every successfully run <code>output.log</code> file and </p> <ol> <li>Place this data into an excel file called <code>Unique_EET_Gaussian_Jobs.xlsx</code>, and two text files called <code>Unique_EET_Gaussian_Jobs.txt</code> and <code>Unique_EET_Gaussian_Jobs_wavenumber.txt</code>. These are located in the <code>EET_Data</code> folder that has just been created. </li> <li>Also in the newly created <code>EET_Data</code> folder are text files of the electronic coupling values for particular functionals and basis sets are also be given in the  <code>TXT_of_Func_and_basis_sets_Energy</code> and <code>TXT_of_Func_and_basis_sets_Wavenumber</code> folders. These files contain the electron coupling information in meV and in cm<sup>-1</sup>. </li> <li>The <code>Individual_EET_Data</code> contains electronic coupling values for each dimer in individual text files. </li> </ol>"},{"location":"ECCP_Output_and_Running_DFT_Calculations/Postprocessing_Data.html#processing-results-of-intermolecular-charge-transfer-ict-jobs-using-eccp-process_ict","title":"Processing results of Intermolecular Charge Transfer (ICT) jobs using <code>ECCP process_ICT</code>","text":"<p>To Do</p> <p>It is possible for this program to process the intermolecular charge transfer results from Gaussian jobs and present the results in text and in an excel spreadsheet. If the Gaussian job runs successfully, it will give a <code>output.log</code> file that matrix data for obtaining intermolecular charge transfer energies, such as hole and electron transfer energies. To do this, move into your <code>Unique_Eigendata_Gaussian_Jobs</code> folder and run <code>ECCP process_ICT</code> by typing into the terminal: </p> <pre><code>cd Unique_Eigendata_Gaussian_Jobs\nECCP process_ICT\n</code></pre> <p>This method will go through all the folders in <code>Unique_Eigendata_Gaussian_Jobs</code> and extract the data from every successfully run <code>output.log</code> file and: </p> <ol> <li> <p>Locate and extract the overlap matrix and molecular orbital (MO) energies and coefficients from the <code>output.log</code> and save these matrices as txt files called:</p> <ul> <li><code>orbital_overlap_matrix.txt</code>: This is the overlap matrix. </li> <li><code>MO_energies.txt</code>: These are the energies of the MOs in your monomer/dimer.</li> <li><code>MO_coefficients.txt</code>: These are the coefficients of the MOs in your monomer/dimer.</li> <li><code>MO_orbital_names.txt</code>: These are the names and the indices of the MO coefficients that are involved with each atom in your monomer/dimer.</li> <li><code>MO_occupancies.txt</code>: This file indicates which orbtials are occupied and which orbtials are vacant. </li> </ul> </li> <li> <p>Remove any matrices from the <code>output.log</code>  files. This is necessary as these matrices can make a <code>output.log</code> incredibly large (GBs is size). This will reduce the size of the <code>output.log</code> to a few MBs or less. All the necessary matrix data will be located in txt file as mentioned in (1.). </p> </li> <li>Calculate the hole and electron transfer energies and place these values into an excel file called <code>Unique_ICT_Gaussian_Jobs.xlsx</code>, and two text files called <code>Unique_ICT_Gaussian_Jobs.txt</code> and <code>Unique_ICT_Gaussian_Jobs.txt</code>. These are located in the <code>ICT_Data</code> folder that has just been created. </li> <li>Also in the newly created <code>ICT_Data</code> folder are text files of the intermolecular charge transfer values for particular functionals and basis sets are also be given in the  <code>TXT_of_Func_and_basis_sets_Energy</code> and <code>TXT_of_Func_and_basis_sets_Wavenumber</code> folders. These files contain the intermolecular charge transfer energy values in meV and in cm :sup:<code>-1</code>. </li> <li>The <code>Individual_ICT_Data</code> contains intermolecular charge transfer energy values for each dimer in individual text files. </li> </ol>"},{"location":"ECCP_Output_and_Running_DFT_Calculations/Postprocessing_Data.html#processing-matrix-values-from-eigendata-jobs-using-eccp-process_eigendata","title":"Processing matrix values from Eigendata jobs using <code>ECCP process_Eigendata</code>","text":"<p>To Do</p> <p>Instead of processing the ICT jobs completely, you may just want to obtain the matrix text files from the Eigendata folder. If you only want to process the matrix data from your successfully run <code>output.log</code> files, move into your <code>Unique_Eigendata_Gaussian_Jobs</code> folder and run <code>ECCP process_Eigendata</code> by typing into the terminal: </p> <pre><code>cd Unique_Eigendata_Gaussian_Jobs\nECCP process_Eigendata\n</code></pre> <p>This method will go through all the folders in <code>Unique_Eigendata_Gaussian_Jobs</code> and extract the data from every successfully run <code>output.log</code> file and: </p> <ol> <li> <p>Locate and extract the overlap matrix and molecular orbital (MO) energies and coefficients from the <code>output.log</code> and save these matrices as txt files called:</p> <ul> <li><code>orbital_overlap_matrix.txt</code>: This is the overlap matrix. </li> <li><code>MO_energies.txt</code>: These are the energies of the MOs in your monomer/dimer.</li> <li><code>MO_coefficients.txt</code>: These are the coefficients of the MOs in your monomer/dimer.</li> <li><code>MO_orbital_names.txt</code>: These are the names and the indices of the MO coefficients that are involved with each atom in your monomer/dimer.</li> <li> <p><code>MO_occupancies.txt</code>: This file indicates which orbtials are occupied and which orbtials are vacant. </p> </li> <li> <p>Remove any matrices from the <code>output.log</code>  files. This is necessary as these matrices can make a <code>output.log</code> incredibly large (GBs is size). This will reduce the size of the <code>output.log</code> to a few MBs or less. All the necessary matrix data will be located in txt file as mentioned in (1.). </p> </li> </ul> </li> </ol>"},{"location":"ECCP_Output_and_Running_DFT_Calculations/Postprocessing_Data.html#remove-large-and-unnecessary-files-using-eccp-tidy","title":"Remove large and unnecessary files using <code>ECCP tidy</code>","text":"<p>Gaussian produces a number of files that are not needed once the calculation has finished. Many of these calculation are large and do not provide any further necessary information. These include <code>.chk</code>, <code>.d2e</code>, <code>.int</code>, <code>.rwf</code>, and <code>.skr</code> files. Removing these files saves space and makes data management much easier. </p> <p>To use this program, move into the overall path that contains all your Gaussian jobs, and type <code>ECCP tidy</code> into the terminal:</p> <pre><code>cd path/to/gaussian/jobs\nECCP tidy\n</code></pre> <p>Note</p> <p>Note that this program will only remove the files of jobs that have successfully finished. <code>ECCP</code> will check to make sure the job has completed successfully before removing unnecessary files. </p>"},{"location":"ECCP_Output_and_Running_DFT_Calculations/Submitting_Jobs_to_Slurm.html","title":"How to submit Gaussian/ORCA jobs to slurm using <code>ECCP submit</code>","text":"<p>To submit jobs to slurm manually in slurm, go to the directory with the desired Gaussian/ORCA job you want to submit (which includes a <code>.gjf</code>). You will see that another file called <code>submit.sl</code> should be there as well. This file contains all the information required for the Gaussian/ORCA job to be submitted to slurm. To submit this job manually, type into the terminal: </p> <pre><code>sbatch submit.sl\n</code></pre> <p>If you have lots of jobs to submit to slurm in many subfolders, you can also type <code>ECCP submit</code> that will submit every <code>submit.sl</code> script that are found as long as a <code>.gjf</code> file is found alongside the <code>submit.sl</code> script. This include all the different types of <code>submit.sl</code> scripts in the RE folders where appropriate. To use this program, change into the directory that contains the Gaussian/ORCA job you want to submit to slurm. For example, you could change directory into the <code>Unique_EET_Gaussian_Jobs</code> folder and then type <code>ECCP submit</code> into the terminal:</p> <pre><code>cd Unique_EET_Gaussian_Jobs\nECCP submit\n</code></pre> <p>Or, you might only want to run a selection of jobs from the <code>Unique_EET_Gaussian_Jobs</code> folder:</p> <pre><code>cd Unique_EET_Gaussian_Jobs/IDIC_cif\nECCP submit\n</code></pre> <p><code>ECCP submit</code> will only run jobs that contain both a <code>.gjf</code> file and a <code>submit.sl</code> file. <code>ECCP submit</code> will not run any jobs that also contain a <code>.log</code> file. This is because any Gaussian/ORCA job folder that contains any one of these file is likely already running or has already run, so we don't want this job to be submitted to slurm again. If you want to re-run this job from scratch, remove these files from the Gaussian/ORCA job folder before resubmitting. </p>"},{"location":"Guide_to_Using_the_ECCP_Program/index.html","title":"Guide To Using The ECCP Program","text":"<p>The ECCP program is designed allow the user to create <code>Gaussian</code>/<code>ORCA</code> files for calculating electronic properties of molecules in crystals, including exciton and charge diffusion. </p> <p>Info</p> <p>The ECCP program works by separating the crystal into molecules, combining them into dimers of neighbouring molecules, and creating DFT files for calculating electronic energy coupling between molecules, as well as reorganisation energies of molecules caused by a molecule being excited from the ground to excited state. </p> <p>The ECCP program works as following; given an input crystal file for a molecular crystal, the ECCP program will: </p> <ol> <li>Determine all the individual molecules in the crystal.</li> <li>Remove solvents if desired.</li> <li>Determine which molecules neighbour each other, including those that neighbour each other across different cells. </li> <li>Save all the molecules to disk, including <code>Gaussian</code>/<code>ORCA</code> files for obtaining structural energies, reorganisation energies (RE) and atomic transition charges (ATC). </li> <li> <p>If desired, determine which of those molecules are structurally and conformationally equivalent to each other. </p> <ul> <li>Save which molecules are structurally equivalent and conformationally equivalent into a text file.</li> <li>Create <code>Gaussian</code>/<code>ORCA</code> files for obtaining structural and reorganisation energies (with conformationally equivalent molecules), as well as atomic transition charges (with structurally equivalent molecules).</li> </ul> </li> <li> <p>Obtain all the dimers within the crystal.</p> </li> <li>Save all the dimers to disk, including <code>Gaussian</code>/<code>ORCA</code> files for obtaining electronic energy transfer (EET) and intermolecular charge transfers (ICT) coupling values. </li> <li> <p>If desired, determine which of those dimers are structurally equivalent to each other. </p> <ul> <li>Save those structurally equivalent dimers into a text file.</li> <li>Create <code>Gaussian</code>/<code>ORCA</code> files for obtaining electronic energy transfer (EET) and intermolecular charge transfers (ICT) coupling values with those structurally equivalent dimers.</li> </ul> </li> <li> <p>Write the summaries of all the molecules and dimers extracted from the crystal. </p> </li> </ol>"},{"location":"Guide_to_Using_the_ECCP_Program/index.html#notes-about-structurally-and-conformationally-equivalent-molecules","title":"Notes about structurally and conformationally equivalent molecules","text":"<ul> <li>Structurally equivalent means two molecules are exactly the same, include the position of all non-hydrogen atoms</li> <li>Conformationally equivalent means two molecules are the same, but the exact position of atoms does not necessarily need to be the same. </li> </ul>"},{"location":"Guide_to_Using_the_ECCP_Program/Calculation_Parameters_and_Submission_Information_Settings.html","title":"Calculation Parameters and Submission Information Settings","text":"<p>The following provide information about the settings and other advice for the Gaussian/ORCA parameters and submission information dictionaries required for running this program.</p>"},{"location":"Guide_to_Using_the_ECCP_Program/Calculation_Parameters_and_Submission_Information_Settings.html#tags-needed-for-the-calculation_parameters-dictionaries","title":"Tags needed for the <code>calculation_parameters</code> dictionaries","text":"<p>The <code>calculation_parameters_for_atomic_transition_charges</code>, <code>calculation_parameters_for_reorganisation_energy</code>, <code>calculation_parameters_for_electronic_energy_transfer</code>, and <code>calculation_parameters_for_intermolecular_charge_transfer</code> dictionaries allow you to give the parameters needed for the Gaussian/ORCA input files. These include:</p> <ul> <li><code>'calc_software'</code> (str.): This is the program that you would like to use to perform your quantum calculations. This can be either <code>'Gaussian'</code> or <code>'ORCA'</code>. </li> <li><code>'mem'</code> (str.): This is the amount of memory that is used by Gaussian. Gaussian needs this variable. ORCA does not use this variable.</li> <li><code>'method'</code> (str.): The level of theory you want to use (i.e. the functional). Example: <code>'wB97XD'</code> for Gaussian, or <code>wB97X-D3</code> for ORCA. Note that the input names for the same functionals may be different for Gaussian and ORCA. Check the manuals before running the ECCP program to make sure you are calculating molecules and dimers with the desired functional.</li> <li><code>'basis'</code> (str.): The basis set you want to use. Example: <code>'6-311G(d)'</code>. Note that the input names for the same basis sets may be different for Gaussian and ORCA. Check the manuals before running the ECCP program to make sure you are calculating molecules and dimers with the desired basis set.</li> <li><code>'td_settings'</code> (str.): This allows you to provide the settings for performing TD-DFT calculations. For example, if you want to perform TD-DFT calculations with the Tamm-Dancoff approximation and solve for 3 states, you want to set this to <code>'tda(nstates=3)'</code>. Default: <code>'TD'</code></li> <li><code>'temp_folder_path'</code> (str.): This is the scratch drive to place files into. This is useful if you want the Gaussian/ORCA temporary files to be saved onto a local disk rather than a NFS if running on a computer cluster. Set to <code>None</code> if you do not want to give this. Default: <code>None</code>. </li> </ul> <p>Other parameters that can be given in the <code>calculation_parameters_for_atomic_transition_charges</code>, <code>calculation_parameters_for_electronic_energy_transfer</code>, and <code>calculation_parameters_for_intermolecular_charge_transfer</code> dictionaries are:</p> <ul> <li><code>'extra'</code> (str.): These are any extra tags that you need to add. For example in Gaussian: <code>'# maxdisk=2TB scf=(xqc,maxcycle=512) scrf=(iefpcm,read)'</code></li> <li><code>'addsec'</code> (str.): These are the lines that you want to write to the <code>.gjf</code> file that come after the atomic positions. For example, if you added <code>'scrf=(iefpcm,read)'</code> in your <code>'extra'</code> entry, you will want to read in the relative electric permittivity after the atomic positions by setting <code>calculation_parameters_for_atomic_transition_charges['addsec'] = 'Eps=4.0'</code>, where in this example we have set the relative electric permittivity to 4.0. This tag is only needed for Gaussian. This is because all the variable you would write in here for Gaussian you write in <code>calculation_parameters['extra']</code> for ORCA.</li> </ul> <p>You can also specify where you would like certain files to be placed, particularly if you want to place some of the temporary Gaussian/ORCA files into a SCRATCH directory. If you want all the temporary files to be placed in a general SCRATCH files, provide a entry for <code>'scratch_path'</code> in <code>calculation_parameters</code> dictionary: </p> <ul> <li><code>'temp_folder_path'</code> (str.): This is the place that you want to store temporary Gaussian/ORCA files in (the scratch drive). The ECCP will write the script for that appropriate folders are made in your <code>'temp_folder_path'</code> that temporary Gaussian/ORCA files will be saved to. Checkpoint files will be saved to the same place as the <code>.gjf</code> file to allow you to easily resubmit incomplete jobs. </li> <li><code>'place_chk_in_temp'</code> (bool.): If you have given a directory for <code>'temp_folder_path'</code>, you can choose to also place the checkpoint file in the <code>'temp_folder_path'</code> directory as well if this is set to <code>True</code>. If you want the checkpoint file to be place in the same place as the <code>.gjf</code> (to allow you to easily continue the calculation if it does not finish in time), set this to <code>False</code>. Default: <code>False</code></li> </ul> <p>Examples of the <code>calculation_parameters_for_atomic_transition_charges</code>, <code>calculation_parameters_for_reorganisation_energy</code>, <code>calculation_parameters_for_electronic_energy_transfer</code>, and <code>calculation_parameters_for_intermolecular_charge_transfer</code> dictionaries are given below:</p> Examples of calculation_parameters_for_atomic_transition_charges<pre><code># The following dictionaries provide the Gaussian/ORCA parameters and Submission information required for performing \n# Atomic Transition Charge (ATC) calculations on your molecules.\n\n# This dictionary will add tags to your Gaussian/ORCA input file.\ncalculation_parameters_for_atomic_transition_charges = {}\ncalculation_parameters_for_atomic_transition_charges['calc_software']                = 'Gaussian'\ncalculation_parameters_for_atomic_transition_charges['mem']                          = '64GB'\ncalculation_parameters_for_atomic_transition_charges['method']                       = 'wB97XD'\ncalculation_parameters_for_atomic_transition_charges['basis']                        = '6-31+G(d,p)'\ncalculation_parameters_for_atomic_transition_charges['td_settings']                  = 'tda(nstates=10)'\n</code></pre> Examples of calculation_parameters_for_reorganisation_energy<pre><code># The following dictionaries provide the Gaussian/ORCA parameters and Submission information required for performing \n# reorganisation energy (RE) calculations on your molecules.\n\n# This dictionary will add tags to your Gaussian/ORCA input file.\ncalculation_parameters_for_reorganisation_energy = {}\ncalculation_parameters_for_reorganisation_energy['calc_software']    = 'Gaussian'\ncalculation_parameters_for_reorganisation_energy['mem']              = '256GB'\ncalculation_parameters_for_reorganisation_energy['method']           = calculation_parameters_for_atomic_transition_charges['method']\ncalculation_parameters_for_reorganisation_energy['basis']            = calculation_parameters_for_atomic_transition_charges['basis']\n</code></pre> Examples of calculation_parameters_for_electronic_energy_transfer<pre><code># The following dictionaries provide the Gaussian/ORCA parameters and Submission information required for performing \n# Electronic Energy Transfer (EET) calculations on your molecules.\n\n# This dictionary will add tags to your Gaussian/ORCA .gjf file\ncalculation_parameters_for_electronic_energy_transfer = {}\ncalculation_parameters_for_electronic_energy_transfer['calc_software']                = 'Gaussian'\ncalculation_parameters_for_electronic_energy_transfer['mem']                          = '64GB'\ncalculation_parameters_for_electronic_energy_transfer['method']                       = calculation_parameters_for_atomic_transition_charges['method']\ncalculation_parameters_for_electronic_energy_transfer['basis']                        = calculation_parameters_for_atomic_transition_charges['basis']\ncalculation_parameters_for_electronic_energy_transfer['td_settings']                  = calculation_parameters_for_atomic_transition_charges['td_settings']\n</code></pre> Examples of calculation_parameters_for_intermolecular_charge_transfer<pre><code># The following dictionaries provide the Gaussian/ORCA parameters and Submission information required for obtaining \n# eigendata (such as overlap orbtials and molecular orbital energies and coefficients).\n</code></pre>"},{"location":"Guide_to_Using_the_ECCP_Program/Calculation_Parameters_and_Submission_Information_Settings.html#tags-needed-for-the-calculation_parameters_for_franck_condon_factors-dictionary","title":"Tags needed for the <code>calculation_parameters_for_franck_condon_factors</code> dictionary","text":"<p>THIS WILL PROBABLY CHANGE: UPDATE THIS WHEN THIS PROCESS HAS BEEN SORTED.</p> <p>The Franck-Condon calculation performed by the Gaussian/ORCA program is a bit different to other calculations, as all the calculations that need to be done are performed by the <code>Reorganisation Energy</code> component. Here, Gaussian will use the frequency checkpoint files created during the ground and excited state optimisation calculations (performed by the <code>Reorganisation Energy</code> component). For this reason, we don't need to specify all the inputs as in Calculation Parameter Settings. The inputs needed for <code>submission_information_for_franck_condon_factors</code> are:</p> <ul> <li><code>'mem'</code> (str.): This is the amount of memory that is used by Gaussian. Recommended to set this to <code>'8GB'</code></li> <li><code>'method'</code> (str.): The level of theory you want to use (i.e. the functional). Example: <code>'wB97XD'</code></li> <li><code>'basis'</code> (str.): The basis set you want to use. Example: <code>'6-311G(d)'</code></li> </ul> <p>Note: Recommendations for <code>submission_information_for_franck_condon_factors</code>, <code>submission_information_for_franck_condon_factors['cpus_per_task'] = 2</code> and <code>submission_information_for_franck_condon_factors['mem'] = '16GB'</code>. </p> <p>An example of <code>calculation_parameters_for_franck_condon_factors</code> is given below</p> Example of calculation_parameters_for_franck_condon_factors<pre><code># Franck-Condon (FC) (and Huang-Rhys (HR)) calculations on your molecules. \n# NOTE: If you want to use this, you also need to set Gaussian/ORCA parameters and submission information for obtaining reorganisation energies. \n\n# This dictionary will add tags to your Gaussian/ORCA input file.\ncalculation_parameters_for_franck_condon_factors = {}\ncalculation_parameters_for_franck_condon_factors['calc_software'] = 'Gaussian'\ncalculation_parameters_for_franck_condon_factors['mem']           = '8GB'\n</code></pre>"},{"location":"Guide_to_Using_the_ECCP_Program/Calculation_Parameters_and_Submission_Information_Settings.html#advice-for-settings-for-the-calculation_parameters-dictionaries","title":"Advice for settings for the <code>calculation_parameters</code> dictionaries","text":"<p>The Gaussian jobs that use the <code>calculation_parameters_for_atomic_transition_charges</code>, <code>calculation_parameters_for_reorganisation_energy</code>, <code>calculation_parameters_for_electronic_energy_transfer</code>, and <code>calculation_parameters_for_intermolecular_charge_transfer</code> dictionaries perform single point calculations, as well as other calculations for TD-DFT calculations. The Gaussian jobs that use the <code>calculation_parameters_for_reorganisation_energy</code> dictionary perform geometry optimisation calculations, which are far more computationally intensive to perform. </p> <p>The amount of memory that you will need to use for <code>calculation_parameters_for_reorganisation_energy</code> should be double or more needed for <code>calculation_parameters</code>.</p> <p>Recommendations for <code>calculation_parameters_for_franck_condon_factors</code> and <code>submission_information_for_franck_condon_factors</code> dictionaries: </p> <ul> <li><code>calculation_parameters_for_franck_condon_factors['mem'] = '14GB'</code></li> <li><code>submission_information_for_franck_condon_factors['mem'] = '16GB'</code></li> <li><code>submission_information_for_franck_condon_factors['cpus_per_task'] = 2</code></li> </ul>"},{"location":"Guide_to_Using_the_ECCP_Program/Calculation_Parameters_and_Submission_Information_Settings.html#tags-needed-for-the-submission_information-dictionaries","title":"Tags needed for the <code>submission_information</code> dictionaries","text":"<p>The <code>submission_information_for_atomic_transition_charges</code>, <code>submission_information_for_multiwfn</code>, <code>submission_information_for_reorganisation_energy</code>, <code>submission_information_for_franck_condon_factors</code>, <code>submission_information_for_electronic_energy_transfer</code>, and <code>dimer_eigendata_file_creation_information</code> dictionaries allow you to place the parameters needed for the <code>submit.sl</code> , <code>multiwfn_submit.sl</code>, and the various reorganisation <code>submit.sl</code> files. These include:</p> <ul> <li><code>'cpus_per_task'</code>: This the the number of CPU's you want to use. This information is also passed on to your Gaussian .gjf file. THIS VARIABLE IS ONLY USED FOR GAUSSIAN CALCULATIONS.</li> <li><code>'ntasks'</code>: This the the number of CPU's you want to use. This information is also passed on to your ORCA .inp file. THIS VARIABLE IS ONLY USED FOR ORCA CALCULATIONS.</li> <li><code>'mem'</code>: This is the total amount of RAM memory you want to use across all your CPUs. </li> <li><code>'time'</code>: This is the amount of time you want to run this job for. Written HH:MM:SS</li> <li><code>'partition'</code>: This is the name of the partition you want to run your job on.</li> <li><code>'constraint'</code>: This assigns particular nodes to run Gaussian jobs. This is a variable that is needed at Victoria University of Wellington. See <code>https://slurm.schedmd.com/sbatch.html</code> for more information about this. This is set to <code>'AVX'</code> on the R\u0101poi computer cluster at Victoria University of Wellington. </li> <li><code>'email'</code>: This is the email you want to use to notify you about this job</li> <li><code>'gaussian_version'</code>: This is the version of gaussian you want to use. For example: <code>'g16'</code>. This setting is required for <code>submission_information</code> and <code>submission_information_for_reorganisation_energy</code>, as these processes use Gaussian to perform ATC, RE, and EET calculations. This tag is not needed for the <code>submission_information_for_multiwfn</code> dictionary. THIS VARIABLE IS ONLY USED FOR GAUSSIAN CALCULATIONS.</li> <li><code>'ORCA_version'</code>: This is the version of ORCA you want to use. For example: <code>'ORCA/5.0.3'</code>. This setting is required for <code>submission_information</code> and <code>submission_information_for_reorganisation_energy</code>, as these processes use ORCA to perform ATC, RE, and EET calculations. This tag is not needed for the <code>submission_information_for_multiwfn</code> dictionary. THIS VARIABLE IS ONLY USED FOR GAUSSIAN CALCULATIONS.</li> <li><code>'python_version'</code>: This is the version of python you want to use. For example: <code>'3.8.1'</code> for Python 3.8.1. This tag is only needed for the <code>submission_information_for_reorganisation_energy</code> dictionary, as python is only used here to create single point calculations from the results of the geometrically optimised Gaussian/ORCA calculations. </li> </ul> <p>For the <code>submission_information_for_multiwfn</code> dictionary, you only need to provide the <code>'cpus_per_task'</code>/<code>'ntasks'</code>, <code>'mem'</code>, <code>'time'</code>, and <code>'partition'</code> input parameters (and optionally the <code>'constraint'</code> and <code>'email'</code> input parameters). </p> <p>Examples of the <code>submission_information_for_atomic_transition_charges</code>, <code>submission_information_for_multiwfn</code>, <code>submission_information_for_reorganisation_energy</code>, <code>submission_information_for_franck_condon_factors</code>, <code>submission_information_for_electronic_energy_transfer</code>, and <code>dimer_eigendata_file_creation_information</code> dictionaries are given below:</p> Examples of submission_information_for_atomic_transition_charges and submission_information_for_multiwfn<pre><code>calculation_parameters_for_atomic_transition_charges['temp_folder_path']             = '/tmp/wealge'\ncalculation_parameters_for_atomic_transition_charges['extra']                        = '# maxdisk=2TB scf=(xqc,maxcycle=512)'\n\n# This dictionary will add tags to your submit.sl file for performing Gaussian/ORCA Calculations to get the initial ATC wfn files and to perofmr EET calculations\nsubmission_information_for_atomic_transition_charges = {}\nsubmission_information_for_atomic_transition_charges['cpus_per_task']    = 32\nsubmission_information_for_atomic_transition_charges['mem']              = '68GB' # This has been set to calculation_parameters_for_atomic_transition_charges['mem'] + 12 GBs\nsubmission_information_for_atomic_transition_charges['time']             = '10-00:00'\nsubmission_information_for_atomic_transition_charges['partition']        = 'parallel'\nsubmission_information_for_atomic_transition_charges['constraint']       = 'AVX'\nsubmission_information_for_atomic_transition_charges['email']            = 'geoffreywealslurmnotifications@gmail.com'\nsubmission_information_for_atomic_transition_charges['gaussian_version'] = 'gaussian/g16'\nsubmission_information_for_atomic_transition_charges['python_version']   = 'python/3.8.1'\n\n# This tag indicates if you want to obtain Gaussian/ORCA input files of molecules for performing ATC calculations. \nsubmission_information_for_multiwfn = {}\nsubmission_information_for_multiwfn['cpus_per_task'] = 16\nsubmission_information_for_multiwfn['mem']           = '32GB'\nsubmission_information_for_multiwfn['time']          = '0-03:00'\n</code></pre> Examples of submission_information_for_reorganisation_energy<pre><code>#calculation_parameters_for_reorganisation_energy['temp_folder_path'] = calculation_parameters_for_atomic_transition_charges['temp_folder_path']\ncalculation_parameters_for_reorganisation_energy['extra']            = '# maxdisk=2TB scf=(xqc,maxcycle=512)'\n\n# This tag indicates if you want to obtain Gaussian/ORCA input files of molecules for performing ATC calculations. \nsubmission_information_for_reorganisation_energy = {}\nsubmission_information_for_reorganisation_energy['cpus_per_task']    = 128\nsubmission_information_for_reorganisation_energy['mem']              = '264GB' # This has been set to calculation_parameters_for_reorganisation_energy['mem'] + 24 GBs\nsubmission_information_for_reorganisation_energy['time']             = '10-00:00'\nsubmission_information_for_reorganisation_energy['partition']        = 'parallel'\nsubmission_information_for_reorganisation_energy['constraint']       = 'AVX'\n</code></pre> Examples of submission_information_for_franck_condon_factors<pre><code>calculation_parameters_for_franck_condon_factors['basis']         = calculation_parameters_for_atomic_transition_charges['basis']\ncalculation_parameters_for_franck_condon_factors['extra']         = '# maxdisk=2TB scf=(xqc,maxcycle=512)'\n\n# This tag indicates if you want to obtain Gaussian/ORCA input files of molecules for performing FC calculations. \nsubmission_information_for_franck_condon_factors = {}\nsubmission_information_for_franck_condon_factors['cpus_per_task']    = 2\nsubmission_information_for_franck_condon_factors['mem']              = '16GB' # This has been set to calculation_parameters_for_reorganisation_energy['mem'] + 24 GBs\nsubmission_information_for_franck_condon_factors['time']             = '00-02:00'\nsubmission_information_for_franck_condon_factors['partition']        = 'quicktest'\nsubmission_information_for_franck_condon_factors['constraint']       = 'AVX'\n</code></pre> Examples of submission_information_for_electronic_energy_transfer<pre><code>#calculation_parameters_for_electronic_energy_transfer['temp_folder_path']             = calculation_parameters_for_atomic_transition_charges['temp_folder_path']\ncalculation_parameters_for_electronic_energy_transfer['extra']                        = '# maxdisk=2TB scf=(xqc,maxcycle=512)'\n\n# This dictionary will add tags to your submit.sl file for performing Gaussian/ORCA Calculations to get the initial ATC wfn files and to perform EET calculations\nsubmission_information_for_electronic_energy_transfer = {}\nsubmission_information_for_electronic_energy_transfer['cpus_per_task']    = 32\nsubmission_information_for_electronic_energy_transfer['mem']              = '68GB' # This has been set to calculation_parameters_for_electronic_energy_transfer['mem'] + 12 GBs\nsubmission_information_for_electronic_energy_transfer['time']             = '10-00:00'\nsubmission_information_for_electronic_energy_transfer['partition']        = 'parallel'\nsubmission_information_for_electronic_energy_transfer['constraint']       = 'AVX'\n</code></pre> Examples of dimer_eigendata_file_creation_information<pre><code># This dictionary will add tags to your Gaussian/ORCA input file\ncalculation_parameters_for_eigendata = dict(calculation_parameters_for_electronic_energy_transfer)\n</code></pre>"},{"location":"Guide_to_Using_the_ECCP_Program/Calculation_Parameters_and_Submission_Information_Settings.html#advice-for-settings-for-the-submission_information-dictionaries","title":"Advice for settings for the <code>submission_information</code> dictionaries","text":"<p>The Gaussian/ORCA calculations that use the <code>submission_information_for_atomic_transition_charges</code>, <code>submission_information_for_electronic_energy_transfer</code>, and <code>dimer_eigendata_file_creation_information</code> dictionaries perform single point calculations, as well as other calculations for TD-DFT calculations. The Gaussian/ORCA jobs that use the <code>submission_information_for_reorganisation_energy</code> dictionary perform geometry optimisation calculations, which are far more computationally intensive to perform. </p> <p>The amount of cpus, memory and computational time that you should need to use for <code>submission_information_for_reorganisation_energy</code> should be double or more needed for <code>submission_information_for_atomic_transition_charges</code> and <code>submission_information_for_electronic_energy_transfer</code> dictionaries. </p> <p>The Multiwfn program to perform the ATC calculations is not as computationally expensive as Gaussian, and likely will finish within a fraction of time needed for the Gaussian calculation. For this reason, the amount of cpus, memory and computational time <code>submission_information_for_multiwfn</code> can be the same or less than for <code>`submission_information_for_atomic_transition_charges</code>, and <code>submission_information_for_electronic_energy_transfer</code> dictionaries. </p> <p>Recommendations for <code>calculation_parameters_for_franck_condon_factors</code> and <code>submission_information_for_franck_condon_factors</code> dictionaries: </p> <ul> <li><code>calculation_parameters_for_franck_condon_factors['mem'] = '14GB'</code></li> <li><code>submission_information_for_franck_condon_factors['mem'] = '16GB'</code></li> <li><code>submission_information_for_franck_condon_factors['cpus_per_task'] = 2</code></li> </ul>"},{"location":"Guide_to_Using_the_ECCP_Program/Environment_Settings.html","title":"Environment Settings","text":"<p>NOTE: NOT IMPLEMENTED YET.</p> <p>In some cases, you may like to include the neighbouring molecules around each molecule and dimer in Gaussian/ORCA calculations. This may be desired if you want to obtain coupling values that are influenced by the local electric field surrounding each molecule and dimer. For example, ADD EXAMPLE HERE.</p> <p>There are a few parameters that are included in this dictinoary:</p> <ul> <li><code>'include_environment_in_molecule_calcs'</code> (bool.): Set this to <code>True</code> if you would like include neighbours surrounding each molecule in the crystal in your Gaussian/ORCA calculations. </li> <li><code>'include_environment_in_dimer_calcs'</code> (bool.): Set this to <code>True</code> if you would like include neighbours surrounding each dimer in the crystal system in your Gaussian/ORCA calculations. </li> </ul> <p>If you set either <code>'include_environment_in_molecule_calcs'</code> or <code>'include_environment_in_dimer_calcs'</code> as true, you will need to include in your dictionary the following variable:</p> <ul> <li><code>'max_environment_distance'</code> (float): This is the maximum distance between any atoms in each molecules from each other for those two molecules to be considered neighbours.</li> </ul> <p>NOTE: The Nearest Atoms method is used to determine neighbouring molecules in the crystal. </p>"},{"location":"Guide_to_Using_the_ECCP_Program/Molecule_and_Dimer_Methods.html","title":"Methods for Making and Obtaining Unique Molecules and Dimers from the Crystal","text":"<p>There are several options available for obtaining moelcules and dimers from the crystal, as well as for distinguishing unique molecules and dimers in the crystal. Multiple methods are given for the <code>make_molecule_method</code>, <code>molecule_equivalence_method</code>, <code>dimer_method</code>, and <code>dimer_equivalence_method</code> dictionaries. </p>"},{"location":"Guide_to_Using_the_ECCP_Program/Molecule_and_Dimer_Methods.html#methods-available-for-make_molecule_method","title":"Methods available for <code>make_molecule_method</code>","text":"<p>In order to obtain the individual molecules in the crystal, the molecule may be placed in a position that crosses from one side of the periodic boundary to the opposite side of the crystal lattice. While this is all fine, it does not make viewing the molecule very user-friendly. Therefore, the ECCP program will move the segments of the disconnected molecule around so that it is more user-friendly to view. There are two approaches for reconstructing the molecule available in ECCP. Ideally, both should give the same results.</p>"},{"location":"Guide_to_Using_the_ECCP_Program/Molecule_and_Dimer_Methods.html#the-super-lattice-approach","title":"The Super Lattice Approach","text":"<p>This approach will create a super-lattice consisting of 26 lattices surrounding the origin unit cell. From this, a verison of the complete connected molecule will exist. All partial segments are deleted. This approach is very simple, but it take a bit of time to run.</p> <p>To use this approach, set <code>make_molecule_method = 'super_lattice_approach'</code> in your <code>Run_ECCP.py</code> script. </p>"},{"location":"Guide_to_Using_the_ECCP_Program/Molecule_and_Dimer_Methods.html#markdown","title":"The Component Assembly Approach (Recommended Approach)","text":"<p>This approach will construct a graph of the components of the molecule across the crystal and use this information to determine which bonds have been disconnected in the molecule. The components are then shifted into place based on the periodic boundary condition so that the two bonds are connected again. This is the recommended approach to use. If this approach fail, report the issue and use the <code>'super_lattice_approach'</code>. </p> <p>To use this approach, set <code>make_molecule_method = 'component_assembly_approach'</code> in your <code>Run_ECCP.py</code> script. </p>"},{"location":"Guide_to_Using_the_ECCP_Program/Molecule_and_Dimer_Methods.html#methods-available-for-molecule_equivalence_method","title":"Methods available for <code>molecule_equivalence_method</code>","text":"<p>Some of the molecules that will have been obtained will be identical to each other, having the same twists and bends. It is useful to know which molecules are identical and which are not as this will reduce the number of gaussian jobs that need to be run (as gaussian jobs run on identical molecules will give the same results). The methods that are available are: </p>"},{"location":"Guide_to_Using_the_ECCP_Program/Molecule_and_Dimer_Methods.html#the-invariance-method","title":"The Invariance Method","text":"<p>This method works by using the Procrustes analysis to determine if two molecules are translationally, rotationally, and reflectively invariant with each other. </p> <p>There are three versions of the invariance method that you can use:</p>"},{"location":"Guide_to_Using_the_ECCP_Program/Molecule_and_Dimer_Methods.html#the-comprehensive-invariance-method","title":"The Comprehensive Invariance Method","text":"<p>This method is the best to use for molecules that contain mainly one or a few types of elements in high abundances (not including hydrogen). To use this method, set <code>dimer_equivalence_method = {'method': 'invariance_method', 'type': 'comprehensive'}</code>.</p>"},{"location":"Guide_to_Using_the_ECCP_Program/Molecule_and_Dimer_Methods.html#the-minimal-elemental-abundance-invariance-method","title":"The Minimal Elemental Abundance Invariance Method","text":"<p>This method is the best to use for molecules that contains one or a few elements in low abundances. This method uses these low abundance elements as references to determine how dimer should be rotated onto one another. To use this method, set <code>dimer_equivalence_method = {'method': 'invariance_method', 'type': 'minimal_elemental_abundance'}</code>.</p>"},{"location":"Guide_to_Using_the_ECCP_Program/Molecule_and_Dimer_Methods.html#markdown","title":"The Combination Invariance Method (Recommended Method)","text":"<p>The combination invariance method will check the abundance of elements in your molecules (crystal) and automatically determine whether the comprehensive invariance method or the minimal elemental abundance invariance method should be used. This is the recommended method to use. To use this method, set <code>dimer_equivalence_method = {'method': 'invariance_method', 'type': 'combination'}</code>.</p>"},{"location":"Guide_to_Using_the_ECCP_Program/Molecule_and_Dimer_Methods.html#methods-available-for-make_dimer_method","title":"Methods available for <code>make_dimer_method</code>","text":"<p>In order to identify dimers you need to specify the method for how you want to identify them. There are two methods available for identifying dimers in this program:</p>"},{"location":"Guide_to_Using_the_ECCP_Program/Molecule_and_Dimer_Methods.html#the-centre-of-mass-method","title":"The Centre of Mass Method","text":"<p>This method identifies dimers by looking at the distance between two molecules centre's of mass. If they are smaller than a predefined maximum dimer distance, then those two molecules are considered dimers. </p> <p>To use this method, set <code>dimer_method = {'method': 'CMass_method', 'max_dimer_distance': 20.0}</code>, where <code>max_dimer_distance</code> is a float that is the maximum distance between two molecules centres of mass that you deem for those two molecules to be considered a dimer. </p>"},{"location":"Guide_to_Using_the_ECCP_Program/Molecule_and_Dimer_Methods.html#the-centre-of-molecule-method","title":"The Centre of Molecule Method","text":"<p>This method identifies dimers by looking at the distance between the centre of each monomers. If they are smaller than a predefined maximum dimer distance, then those two molecules are considered dimers. This method ignores hydrogens in the monomer when determining the centre of the monomer, as Hydrogens can not be observed in some cases in X-ray crystallography. </p> <p>To use this method, set <code>dimer_method = {'method': 'CMol_method', 'max_dimer_distance': 20.0}</code>, where <code>max_dimer_distance</code> is a float that is the maximum distance between the centre of two molecules that you deem for those two molecules to be considered a dimer. </p>"},{"location":"Guide_to_Using_the_ECCP_Program/Molecule_and_Dimer_Methods.html#the-average-distance-method","title":"The Average Distance Method","text":"<p>This method identifies dimers by looking at the distances of the non-hydrogen atoms between two molecules. If the average distance between an atom in molecule 1 (or molecule 2) and all non-hydrogen atoms in molecule 2 (molecule 1) is smaller than a predefined maximum dimer distance, then those two molecules are considered dimers. </p> <p>To use this method, set <code>dimer_method = {'method': 'average_distance_method', 'max_dimer_distance': 5.0}</code>, where <code>max_dimer_distance</code> is a float that is the maximum distance between any atom in molecule 1 (or molecule 2) and all non-hydrogen atoms in molecule 2 (molecule 1) for molecule 1 and molecule 2 to be considered a dimer. </p>"},{"location":"Guide_to_Using_the_ECCP_Program/Molecule_and_Dimer_Methods.html#the-nearest-atoms-method","title":"The Nearest Atoms Method","text":"<p>This method identifies dimers by looking at the distances of the non-hydrogen atoms between two molecules. If the distance between any two non-hydrogen atoms is smaller than a predefined maximum dimer distance, then those two molecules are considered dimers. </p> <p>To use this method, set <code>dimer_method = {'method': 'nearest_atoms_method', 'max_dimer_distance': 5.0}</code>, where <code>max_dimer_distance</code> is a float that is the maximum distance between any atoms in each molecules from each other for those two molecules to be considered a dimer. </p>"},{"location":"Guide_to_Using_the_ECCP_Program/Molecule_and_Dimer_Methods.html#methods-available-for-dimer_equivalence_method","title":"Methods available for <code>dimer_equivalence_method</code>","text":"<p>Some of the dimers that will have been obtained will be identical to each other. We would like to know which one of these dimers are equivalent and which ones are unique, as we may not necessarily need to perform Gaussian calculations on equivalent dimer systems. There are three methods available for identifying equivalent dimers in this program:</p>"},{"location":"Guide_to_Using_the_ECCP_Program/Molecule_and_Dimer_Methods.html#the-atomic-distance-method","title":"The Atomic Distance Method","text":"<p>This method works by recording the distances in each dimer, from each atom in molecule 1 to every atom in molecule 2 (as well as recording the distances from each atom in molecule 2 to every atom in molecule 1). These distances are then ordered from each atom from shortest to largest distances. If the distances between atoms in dimer 1 are the same as the distance between atoms in dimer 2, the two dimers are considiered equivalent. </p> <p>To use this method, set <code>dimer_equivalence_method = {'method': 'atomic_distance_method'}</code>.</p>"},{"location":"Guide_to_Using_the_ECCP_Program/Molecule_and_Dimer_Methods.html#the-averaging-method","title":"The Averaging Method","text":"<p>This method works by recording the distances in each dimer, from each atom in molecule 1 to every atom in molecule 2 (as well as recording the distances from each atom in molecule 2 to every atom in molecule 1). All these distances are then averaged to give an average distance. This average distance is then compared between dimers to 2 decimal places. If two dimers have the same average distance, they are considered equivalent. </p> <p>To use this method, set <code>dimer_equivalence_method = {'method': 'averaging_method'}</code>.</p>"},{"location":"Guide_to_Using_the_ECCP_Program/Molecule_and_Dimer_Methods.html#the-invariance-method_1","title":"The Invariance Method","text":"<p>This method works by using the Procrustes analysis to determine if two dimers are translationally, rotationally, and reflectively invariant with each other. </p> <p>There are three versions of the invariance method that you can use:</p>"},{"location":"Guide_to_Using_the_ECCP_Program/Molecule_and_Dimer_Methods.html#the-comprehensive-invariance-method_1","title":"The Comprehensive Invariance Method","text":"<p>This method is the best to use for molecules that contain mainly one or a few types of elements in high abundances (not including hydrogen). To use this method, set <code>dimer_equivalence_method = {'method': 'invariance_method', 'type': 'comprehensive'}</code>.</p>"},{"location":"Guide_to_Using_the_ECCP_Program/Molecule_and_Dimer_Methods.html#the-minimal-elemental-abundance-invariance-method_1","title":"The Minimal Elemental Abundance Invariance Method","text":"<p>This method is the best to use for molecules that contain a elements in low abundances. This method uses these low abundance elements as references to determine how dimer should be rotated onto one another. To use this method, set <code>dimer_equivalence_method = {'method': 'invariance_method', 'type': 'minimal_elemental_abundance'}</code>.</p>"},{"location":"Guide_to_Using_the_ECCP_Program/Molecule_and_Dimer_Methods.html#the-combination-invariance-method-recommended-method","title":"The Combination Invariance Method (Recommended Method)","text":"<p>The combination invariance method will check the abundance of elements in your molecules (crystal) and automatically determine whether the comprehensive invariance method or the minimal elemental abundance invariance method should be used. This is the recommended method to use.  To use this method, set <code>dimer_equivalence_method = {'method': 'invariance_method', 'type': 'combination'}</code>.</p>"},{"location":"Guide_to_Using_the_ECCP_Program/Recommended_Settings.html","title":"Recommended Settings","text":"<p>The recommended settings for this program are given below in python format:</p> Recommended settings for Running the ECCP program<pre><code>from ECCP import ECCP\n\n# This is the method use to reassemble individual molecule from the crystal. \nmake_molecule_method = 'component_assembly_approach'\n# This dictionary include information about determining which molecules are equivalent. Required if you want to perform ATC calculations on molecules.\nmolecule_equivalence_method = {'method': 'invariance_method', 'type': 'combination'} \n\n# This is the method use to obtain dimers between molecules in the system.\ndimer_method = {'method': 'nearest_atoms_method', 'max_dimer_distance': 8.0}\n# This dictionary provides information for determining which dimers are equivalent\ndimer_equivalence_method = {'method': 'invariance_method', 'type': 'combination'} \n\n# This dictionary includes info about how to treat the enivornment surrounding dimers (where applicable).  \nenvironment_settings = {'include_environment_in_molecule_calcs': False, 'include_environment_in_dimer_calcs': False}\n\n# This tag indicates if you want to remove solvents from the crystal. This requires the input file to have a reference to which molecules are solvents called \"SolventList\"\nremove_solvents = False\n</code></pre> <p>Tip</p> <p>It is also recommended thatr you check out the crystal before hand to make sure that there are no issues with it, and to remove sidegroups from the molecules before running the ECCP method. See:</p> <ul> <li>The ReCrystals Program to help to repair molecules in your crystals, and </li> <li>Check out the RSGC Program to see how to automatically remove sidegroups (like aliphatic sidechains) from the molecules in the crystal.  </li> </ul>"},{"location":"Guide_to_Using_the_ECCP_Program/Using_The_ECCP_Program.html","title":"Using the ECCP Program","text":""},{"location":"Guide_to_Using_the_ECCP_Program/Using_The_ECCP_Program.html#how-to-use-the-eccp-program","title":"How To Use The ECCP Program","text":"<p>The Electronic Crystal Calculation Prep (ECCP) program is run using a script called <code>Run_ECCP.py</code>. This contains information about all the crystals you want to obtain molecules and dimers for, as well as the parameters required to create atomic transition charge (ATC), reorganisation energy (RE), and electronic energy transfer (EET) <code>Gaussian</code>/<code>ORCA</code> input files for those molecules and dimers. </p> <p>An example of this script is shown below. General recommendation for settings are given in Recommended Settings.</p> Run_ECCP.py<pre><code>\"\"\"\nRun_ECCP.py, Geoffrey Weal, 18/2/22\n\nThis script is an example input script for the Electronic Crystal Calculation Prep program.\n\"\"\"\nimport os, copy\nfrom ECCP import ECCP\n\n# --------------------------------------------------------------------------------------------------------------\n# --------------------------------------------------------------------------------------------------------------\n# --------------------------------------------------------------------------------------------------------------\n# These are the parameters needed for the dimer method. \n# See https://github.com/geoffreyweal/ECCP for more information about these parameters\n\n# This is the path to the xyz/cif file containing the crystal of interest. \nfilepath = 'MUPMOC.xyz'\n\n# This string points to a file that indicates are any bonds you want to ignore in the \"filepath\" file. If you do not want to give this, set this to None\nbonds_to_ignore = None\n\n# This is the method use to reassemble individual molecule from the crystal. \nmake_molecule_method = 'component_assembly_approach'\n# This dictionary include information about determining which molecules are equivalent. Required if you want to perform ATC calculations on molecules.\nmolecule_equivalence_method = {'method': 'invariance_method', 'type': 'combination'} \n\n# This is the method use to obtain dimers between molecules in the system.\nmake_dimer_method = {'method': 'nearest_atoms_method', 'max_dimer_distance': 8.0}\n# This dictionary provides information for determining which dimers are equivalent\ndimer_equivalence_method = {'method': 'invariance_method', 'type': 'combination'} \n\n# This dictionary includes info about how to treat the enivornment surrounding dimers (where applicable).  \nenvironment_settings = {'include_environment_where_possible': False, 'max_environment_distance': 8.0}\n\n# This tag indicates if you want to remove solvents from the crystal. This requires the input file to have a reference to which molecules are solvents called \"SolventList\"\nremove_solvents = False\n\n# --------------------------------------------------------------------------------------------------------------\n# --------------------------------------------------------------------------------------------------------------\n# --------------------------------------------------------------------------------------------------------------\n# The following settings provide details that the ECCP will use to create folders and run the ECCP program\n\n# The following will be added to the end of the ECCP-created folder. If you dont want this folder to have a suffix, set this to ''.\noverall_folder_suffix_name = 'Default'\n\n# The number of cpus that will be used to run the ECCP program. \nno_of_cpus = 16\n\n# --------------------------------------------------------------------------------------------------------------\n# --------------------------------------------------------------------------------------------------------------\n# --------------------------------------------------------------------------------------------------------------\n# The following dictionaries are required if you want to perform Gaussian/ORCA and Multiwfn jobs on your molecules and dimers\n\n# --------------------------------------------------------------------------------------------------------------\n# The following dictionaries provide the Gaussian/ORCA parameters and Submission information required for performing \n# Atomic Transition Charge (ATC) calculations on your molecules.\n\n# This dictionary will add tags to your Gaussian/ORCA input file.\ncalculation_parameters_for_atomic_transition_charges = {}\ncalculation_parameters_for_atomic_transition_charges['calc_software']                = 'Gaussian'\ncalculation_parameters_for_atomic_transition_charges['mem']                          = '64GB'\ncalculation_parameters_for_atomic_transition_charges['method']                       = 'wB97XD'\ncalculation_parameters_for_atomic_transition_charges['basis']                        = '6-31+G(d,p)'\ncalculation_parameters_for_atomic_transition_charges['td_settings']                  = 'tda(nstates=10)'\ncalculation_parameters_for_atomic_transition_charges['obtain_excitation_amplitudes'] = False\ncalculation_parameters_for_atomic_transition_charges['temp_folder_path']             = '/tmp/wealge'\ncalculation_parameters_for_atomic_transition_charges['extra']                        = '# maxdisk=2TB scf=(xqc,maxcycle=512)'\n\n# This dictionary will add tags to your submit.sl file for performing Gaussian/ORCA Calculations to get the initial ATC wfn files and to perofmr EET calculations\nsubmission_information_for_atomic_transition_charges = {}\nsubmission_information_for_atomic_transition_charges['cpus_per_task']    = 32\nsubmission_information_for_atomic_transition_charges['mem']              = '68GB' # This has been set to calculation_parameters_for_atomic_transition_charges['mem'] + 12 GBs\nsubmission_information_for_atomic_transition_charges['time']             = '10-00:00'\nsubmission_information_for_atomic_transition_charges['partition']        = 'parallel'\nsubmission_information_for_atomic_transition_charges['constraint']       = 'AVX'\nsubmission_information_for_atomic_transition_charges['email']            = 'geoffreywealslurmnotifications@gmail.com'\nsubmission_information_for_atomic_transition_charges['gaussian_version'] = 'gaussian/g16'\nsubmission_information_for_atomic_transition_charges['python_version']   = 'python/3.8.1'\n\n# This tag indicates if you want to obtain Gaussian/ORCA input files of molecules for performing ATC calculations. \nsubmission_information_for_multiwfn = {}\nsubmission_information_for_multiwfn['cpus_per_task'] = 16\nsubmission_information_for_multiwfn['mem']           = '32GB'\nsubmission_information_for_multiwfn['time']          = '0-03:00'\nsubmission_information_for_multiwfn['partition']     = 'parallel'\nsubmission_information_for_multiwfn['constraint']    = 'AVX'\nsubmission_information_for_multiwfn['email']         = 'geoffreywealslurmnotifications@gmail.com'\n\n# --------------------------------------------------------------------------------------------------------------\n# The following dictionaries provide the Gaussian/ORCA parameters and Submission information required for performing \n# reorganisation energy (RE) calculations on your molecules.\n\n# This dictionary will add tags to your Gaussian/ORCA input file.\ncalculation_parameters_for_reorganisation_energy = {}\ncalculation_parameters_for_reorganisation_energy['calc_software']    = 'Gaussian'\ncalculation_parameters_for_reorganisation_energy['mem']              = '256GB'\ncalculation_parameters_for_reorganisation_energy['method']           = calculation_parameters_for_atomic_transition_charges['method']\ncalculation_parameters_for_reorganisation_energy['basis']            = calculation_parameters_for_atomic_transition_charges['basis']\ncalculation_parameters_for_reorganisation_energy['td_settings']      = calculation_parameters_for_atomic_transition_charges['td_settings']\n#calculation_parameters_for_reorganisation_energy['temp_folder_path'] = calculation_parameters_for_atomic_transition_charges['temp_folder_path']\ncalculation_parameters_for_reorganisation_energy['extra']            = '# maxdisk=2TB scf=(xqc,maxcycle=512)'\n\n# This tag indicates if you want to obtain Gaussian/ORCA input files of molecules for performing ATC calculations. \nsubmission_information_for_reorganisation_energy = {}\nsubmission_information_for_reorganisation_energy['cpus_per_task']    = 128\nsubmission_information_for_reorganisation_energy['mem']              = '264GB' # This has been set to calculation_parameters_for_reorganisation_energy['mem'] + 24 GBs\nsubmission_information_for_reorganisation_energy['time']             = '10-00:00'\nsubmission_information_for_reorganisation_energy['partition']        = 'parallel'\nsubmission_information_for_reorganisation_energy['constraint']       = 'AVX'\nsubmission_information_for_reorganisation_energy['email']            = 'geoffreywealslurmnotifications@gmail.com'\nsubmission_information_for_reorganisation_energy['gaussian_version'] = 'gaussian/g16'\nsubmission_information_for_reorganisation_energy['python_version']   = 'python/3.8.1'\n\n# --------------------------------------------------------------------------------------------------------------\n# The following dictionaries provide the Gaussian/ORCA parameters and Submission information required for performing \n# Franck-Condon (FC) (and Huang-Rhys (HR)) calculations on your molecules. \n# NOTE: If you want to use this, you also need to set Gaussian/ORCA parameters and submission information for obtaining reorganisation energies. \n\n# This dictionary will add tags to your Gaussian/ORCA input file.\ncalculation_parameters_for_franck_condon_factors = {}\ncalculation_parameters_for_franck_condon_factors['calc_software'] = 'Gaussian'\ncalculation_parameters_for_franck_condon_factors['mem']           = '8GB'\ncalculation_parameters_for_franck_condon_factors['method']        = calculation_parameters_for_atomic_transition_charges['method']\ncalculation_parameters_for_franck_condon_factors['basis']         = calculation_parameters_for_atomic_transition_charges['basis']\ncalculation_parameters_for_franck_condon_factors['extra']         = '# maxdisk=2TB scf=(xqc,maxcycle=512)'\n\n# This tag indicates if you want to obtain Gaussian/ORCA input files of molecules for performing FC calculations. \nsubmission_information_for_franck_condon_factors = {}\nsubmission_information_for_franck_condon_factors['cpus_per_task']    = 2\nsubmission_information_for_franck_condon_factors['mem']              = '16GB' # This has been set to calculation_parameters_for_reorganisation_energy['mem'] + 24 GBs\nsubmission_information_for_franck_condon_factors['time']             = '00-02:00'\nsubmission_information_for_franck_condon_factors['partition']        = 'quicktest'\nsubmission_information_for_franck_condon_factors['constraint']       = 'AVX'\nsubmission_information_for_franck_condon_factors['email']            = 'geoffreywealslurmnotifications@gmail.com'\nsubmission_information_for_franck_condon_factors['gaussian_version'] = 'gaussian/g16'\nsubmission_information_for_franck_condon_factors['python_version']   = 'python/3.8.1'\n\n# --------------------------------------------------------------------------------------------------------------\n# The following dictionaries provide the Gaussian/ORCA parameters and Submission information required for performing \n# Electronic Energy Transfer (EET) calculations on your molecules.\n\n# This dictionary will add tags to your Gaussian/ORCA .gjf file\ncalculation_parameters_for_electronic_energy_transfer = {}\ncalculation_parameters_for_electronic_energy_transfer['calc_software']                = 'Gaussian'\ncalculation_parameters_for_electronic_energy_transfer['mem']                          = '64GB'\ncalculation_parameters_for_electronic_energy_transfer['method']                       = calculation_parameters_for_atomic_transition_charges['method']\ncalculation_parameters_for_electronic_energy_transfer['basis']                        = calculation_parameters_for_atomic_transition_charges['basis']\ncalculation_parameters_for_electronic_energy_transfer['td_settings']                  = calculation_parameters_for_atomic_transition_charges['td_settings']\ncalculation_parameters_for_electronic_energy_transfer['obtain_excitation_amplitudes'] = False\n#calculation_parameters_for_electronic_energy_transfer['temp_folder_path']             = calculation_parameters_for_atomic_transition_charges['temp_folder_path']\ncalculation_parameters_for_electronic_energy_transfer['extra']                        = '# maxdisk=2TB scf=(xqc,maxcycle=512)'\n\n# This dictionary will add tags to your submit.sl file for performing Gaussian/ORCA Calculations to get the initial ATC wfn files and to perform EET calculations\nsubmission_information_for_electronic_energy_transfer = {}\nsubmission_information_for_electronic_energy_transfer['cpus_per_task']    = 32\nsubmission_information_for_electronic_energy_transfer['mem']              = '68GB' # This has been set to calculation_parameters_for_electronic_energy_transfer['mem'] + 12 GBs\nsubmission_information_for_electronic_energy_transfer['time']             = '10-00:00'\nsubmission_information_for_electronic_energy_transfer['partition']        = 'parallel'\nsubmission_information_for_electronic_energy_transfer['constraint']       = 'AVX'\nsubmission_information_for_electronic_energy_transfer['email']            = 'geoffreywealslurmnotifications@gmail.com'\nsubmission_information_for_electronic_energy_transfer['gaussian_version'] = 'gaussian/g16'\nsubmission_information_for_electronic_energy_transfer['python_version']   = 'python/3.8.1'\n\n# --------------------------------------------------------------------------------------------------------------\n# The following dictionaries provide the Gaussian/ORCA parameters and Submission information required for obtaining \n# eigendata (such as overlap orbtials and molecular orbital energies and coefficients).\n\n# This dictionary will add tags to your Gaussian/ORCA input file\ncalculation_parameters_for_eigendata = dict(calculation_parameters_for_electronic_energy_transfer)\n\n# This dictionary will add tags to your submit.sl file for performing Gaussian/ORCA Calculations to obtain eigendata.\nsubmission_information_for_eigendata = dict(submission_information_for_electronic_energy_transfer)\n\n# --------------------------------------------------------------------------------------------------------------\n# These tag provide the information to the ECCP about Gaussian/ORCA parameters and submission information for performing ATC, RE, and/or EET calculations and/or obtain eigendata (such as overlap orbtials and molecular orbital energies and coefficients).\n# If you dont want to perform a task, set the appropriate take to None. For example: if you don't want to perform ATC calcs, set atc_file_creation_information = None \n\n# This tag indicates if you want to obtain Gaussian/ORCA input files of molecules for performing ATC calculations. \natc_file_creation_information = (calculation_parameters_for_atomic_transition_charges, submission_information_for_atomic_transition_charges, submission_information_for_multiwfn)\n# This tag indicates if you want to obtain Gaussian/ORCA input files to obtain the disorder energies of the molecules in the crystal.\nre_file_creation_information = (calculation_parameters_for_reorganisation_energy, submission_information_for_reorganisation_energy)\n# This tag indicates if you want to obtain Gaussian/ORCA input files to obtain the franck-condon factors (and huang-rhys factors) of the molecules in the crystal.\nfc_file_creation_information = (calculation_parameters_for_franck_condon_factors, submission_information_for_franck_condon_factors)\n# This tag indicates if you want to obtain Gaussian/ORCA input files of dimers for performing EET calculations. \neet_file_creation_information = (calculation_parameters_for_electronic_energy_transfer, submission_information_for_electronic_energy_transfer)\n# This tag indicates if you want to obtain Gaussian/ORCA input files of dimers for obtaining eigendata (such as overlap orbtials and molecular orbital energies and coefficients).\nict_file_creation_information = (calculation_parameters_for_eigendata, submission_information_for_eigendata)\n\n# --------------------------------------------------------------------------------------------------------------\n# --------------------------------------------------------------------------------------------------------------\n# --------------------------------------------------------------------------------------------------------------\n# This will run this method\nECCP(filepath, make_molecule_method=make_molecule_method, molecule_equivalence_method=molecule_equivalence_method, make_dimer_method=make_dimer_method, dimer_equivalence_method=dimer_equivalence_method, environment_settings=environment_settings, remove_solvents=remove_solvents, atc_file_creation_information=atc_file_creation_information, re_file_creation_information=re_file_creation_information, fc_file_creation_information=fc_file_creation_information, eet_file_creation_information=eet_file_creation_information, ict_file_creation_information=ict_file_creation_information, overall_folder_suffix_name=overall_folder_suffix_name, no_of_cpus=no_of_cpus)\n# --------------------------------------------------------------------------------------------------------------\n# --------------------------------------------------------------------------------------------------------------\n# --------------------------------------------------------------------------------------------------------------\n</code></pre> <p>The first set of parameters allow you to give the path to the crystal file you want to run with the ECCP, set which methods you want to use to extract molecules and dimers from the crystal structure, and determine if you would like to include an environment and solvents. </p> <ul> <li><code>filepath</code> (str.): The path to the crystal file of organic photovoltaic (OPV) crystal or chemical system crystal you would like to analyse with this program.</li> <li><code>bonds_to_ignore</code> (str): This is the path to a text file (generally called <code>bonds_to_ignore.txt</code>) that contains the list of bonded atom index pairs that you want to ignore as bonds.<ul> <li>You can determine the indices of the atoms in the bonds you want to ignore using a GUI program, such as <code>ase gui</code>. </li> </ul> </li> </ul> <p>Example</p> <p>An example of this <code>bonds_to_ignore.txt</code> is shown below:</p> bonds_to_ignore.txt<pre><code>0 1\n4 5\n7 11\n23 7\n</code></pre> <ul> <li><code>make_molecule_method</code> (str.): This is the method you would like to use to reconnect a molecule from a crystal that has been cut due to the molecule spanning across a unit cell boundary. See Methods available for <code>make_molecule_method</code> for more information about the <code>make_molecule_method</code> methods available. </li> <li> <p><code>molecule_equivalence_method</code> (dict.): This dictionary indicates the method that you want to use to determine which molecules in the crystal are unique (and which ones are equivalent to each other). See Methods available for <code>molecule_equivalence_method</code> for more information about the <code>molecule_equivalence_method</code> methods available. </p> </li> <li> <p><code>make_dimer_method</code> (dict.): This dictionary contains the information required for determining how dimers are determined/obtained by this program. See Methods available for <code>make_dimer_method</code> for more information about the <code>make_dimer_method</code> methods available. </p> </li> <li> <p><code>dimer_equivalence_method</code> (dict.): This dictionary contains information required for determining which dimers are equivalent and which are unique. See Methods available for <code>dimer_equivalence_method</code> for more information about the <code>dimer_equivalence_method</code> methods available. </p> </li> <li> <p><code>environment_settings</code> (dict.): This dictionary contains information about if you would like to include the environment about molecules and dimers in your <code>Gaussian</code>/<code>ORCA</code> calculations.  See Environment Settings for more information about the <code>environment_settings</code> settings. </p> </li> <li><code>remove_solvents</code> (bool.): If <code>True</code>, will include solvents as monomers in your dimers. If <code>False</code>, will not include solvents as monomers in your dimers.</li> </ul> <p>The second set of parameters allows you to determine the names of folders to save ECCP files to and other general housekeeping parameters. </p> <ul> <li> <p><code>overall_folder_suffix_name</code> (str.): This is the suffix that you can add to the <code>'ECCP_Data'</code> folder name if you need to distinguish it in any way. Folder created will be called <code>'ECCP_Data_XXX'</code>, where <code>XXX</code> is the suffix name. If you don't need to add a suffix, set this to <code>overall_folder_suffix_name = ''</code></p> </li> <li> <p><code>no_of_cpus</code> (int.): This is the number of CPUs that you would like ECCP to run. </p> <ul> <li>NOTE: This is different to the number of CPUs you would like to be use in your <code>Gaussian</code>/<code>ORCA</code> calculations (see below). This variable is purely the number of CPUs that ECCP uses to run.</li> </ul> </li> </ul> <p>Warning</p> <p>You can only use multiple cpus for running the ECCP program on Linux. Mac seems to have a problem when you try to run ECCP on multiple cpus. </p> <ul> <li>If you are running the ECCP program pon a Mac, set <code>no_of_cpus</code> to 1.  </li> </ul> <p>The third set of parameters involves indicating which types of <code>Gaussian</code>/<code>ORCA</code> files you would like to create for the molecules and dimers obtained with the ECCP program.</p> <ul> <li> <p>Molecule-based calculations:</p> <ul> <li><code>atc_file_creation_information</code>: This variable indicates if you want to write atomic transition charge (ATC) <code>Gaussian</code>/<code>ORCA</code> input files for the molecules found in this crystal. If you would like to perform ATC calculations, see Dictionaries needed for obtaining atomic transition charge (ATC) input files for Monomers below. If you do not want to perform ATC calculations, set this variable to <code>None</code>. </li> <li><code>re_file_creation_information</code>: This variable indicates if you want to write reorganisation energy (RE) <code>Gaussian</code>/<code>ORCA</code> input files for the molecules found in this crystal. If you would like to perform RE calculations, see Dictionaries needed for obtaining atomic transition charge (ATC) input files for Monomers below. If you do not want to perform RE calculations, set this variable to <code>None</code>. </li> <li><code>fc_file_creation_information</code>: This variable indicates if you want to write franck-condon (FC) and huang-rhys (HR) <code>Gaussian</code>/<code>ORCA</code> input files for the molecules found in this crystal. If you would like to perform FC/HR calculations, see Dictionaries needed for obtaining atomic transition charge (ATC) input files for Monomers below. If you do not want to perform FC/HR calculation, set this variable to <code>None</code>. Note: If you do want to obtain FC/HR factors, you also need to perform the calculations needed for obtaining reoriganisation energies (RE) as well. </li> </ul> </li> <li> <p>Dimer-based calculations:</p> <ul> <li><code>eet_file_creation_information</code>: This variable indicates if you want to write electronic energy transfer (EET) <code>Gaussian</code>/<code>ORCA</code> input files for the dimers found in this crystal. If you would like to perform EET calculations, see Dictionaries needed for obtaining atomic transition charge (ATC) input files for Monomers below. If you do not want to perform EET calculations, set this variable to <code>None</code>. </li> <li><code>dimer_eigendata_file_creation_information</code>: NOT IMPLEMENTED YET -&gt; This variable indicates if you want to write intermolecular charge transfer (ICT) <code>Gaussian</code>/<code>ORCA</code> input files for the dimers found in this crystal. <code>Gaussian</code>/<code>ORCA</code> files will be written to extract the eigendata matrices (such as overlap intergral matrices, molecular orbital (MO) energies, and MO coefficients) for the monomers and dimers found in this crystal. If you would like to perform ICT calculations, see Dictionaries needed for obtaining atomic transition charge (ATC) input files for Monomers below. If you do not want to perform ICT calculations, set this variable to <code>None</code>. </li> </ul> </li> </ul>"},{"location":"Guide_to_Using_the_ECCP_Program/Using_The_ECCP_Program.html#dictionaries-needed-for-obtaining-atomic-transition-charge-atc-input-files-for-monomers","title":"Dictionaries needed for obtaining atomic transition charge (ATC) input files for Monomers","text":"<p>If you would like to obtain input files for performing atomic transition charge (ATC) calculations, you will want to provide three dictionaries for the <code>get_molecule_atcs</code> variable. These are:</p> <ul> <li><code>calculation_parameters_for_atomic_transition_charges</code> (dict.): This dictionary contains information required for the <code>Gaussian</code>/<code>ORCA</code> files for performing ATC calculations.</li> <li><code>submission_information_for_atomic_transition_charges</code> (dict.): This dictionary contains information required for making the <code>submit.sl</code> file for submitting ATC jobs to slurm. </li> <li><code>submission_information_for_multiwfn</code> (dict.): This dictionary contains information required for the <code>multiwfn_submit.sl</code> file. This submit script will run the Multiwfn component of the calculation, where the <code>.wfn</code> created by <code>Gaussian</code>/<code>ORCA</code> is used to perform the ATC calculation to obtain the <code>.chg</code> file of the molecule. This <code>.chg</code> file contains the atomic transition charges for the molecule. </li> </ul> <p>If you would like to perform ATC calculations for the molcules, you want to set <code>atc_file_creation_information</code> as:</p> <pre><code>atc_file_creation_information = (calculation_parameters_for_atomic_transition_charges, submission_information_for_atomic_transition_charges, submission_information_for_multiwfn)\n</code></pre> <p>See Calculation Parameter Settings and Submission Information Settings for more information about what settings you want to include in these dictionaries. </p> <p>If you do not want to perform ATC calculations for the molcules, you want to set <code>atc_file_creation_information = None</code>:</p> <pre><code>atc_file_creation_information = None\n</code></pre> <p>Examples of the <code>calculation_parameters_for_atomic_transition_charges</code>, <code>submission_information_for_atomic_transition_charges</code>, and <code>submission_information_for_multiwfn</code> dictionaries as given below:</p> Examples of dictionaries needed for obtaining atomic transition charges (ATC) input files<pre><code># The following dictionaries provide the Gaussian/ORCA parameters and Submission information required for performing \n# Atomic Transition Charge (ATC) calculations on your molecules.\n\n# This dictionary will add tags to your Gaussian/ORCA input file.\ncalculation_parameters_for_atomic_transition_charges = {}\ncalculation_parameters_for_atomic_transition_charges['calc_software']                = 'Gaussian'\ncalculation_parameters_for_atomic_transition_charges['mem']                          = '64GB'\ncalculation_parameters_for_atomic_transition_charges['method']                       = 'wB97XD'\ncalculation_parameters_for_atomic_transition_charges['basis']                        = '6-31+G(d,p)'\ncalculation_parameters_for_atomic_transition_charges['td_settings']                  = 'tda(nstates=10)'\ncalculation_parameters_for_atomic_transition_charges['obtain_excitation_amplitudes'] = False\ncalculation_parameters_for_atomic_transition_charges['temp_folder_path']             = '/tmp/wealge'\ncalculation_parameters_for_atomic_transition_charges['extra']                        = '# maxdisk=2TB scf=(xqc,maxcycle=512)'\n\n# This dictionary will add tags to your submit.sl file for performing Gaussian/ORCA Calculations to get the initial ATC wfn files and to perofmr EET calculations\nsubmission_information_for_atomic_transition_charges = {}\nsubmission_information_for_atomic_transition_charges['cpus_per_task']    = 32\nsubmission_information_for_atomic_transition_charges['mem']              = '68GB' # This has been set to calculation_parameters_for_atomic_transition_charges['mem'] + 12 GBs\nsubmission_information_for_atomic_transition_charges['time']             = '10-00:00'\nsubmission_information_for_atomic_transition_charges['partition']        = 'parallel'\nsubmission_information_for_atomic_transition_charges['constraint']       = 'AVX'\nsubmission_information_for_atomic_transition_charges['email']            = 'geoffreywealslurmnotifications@gmail.com'\nsubmission_information_for_atomic_transition_charges['gaussian_version'] = 'gaussian/g16'\nsubmission_information_for_atomic_transition_charges['python_version']   = 'python/3.8.1'\n\n# This tag indicates if you want to obtain Gaussian/ORCA input files of molecules for performing ATC calculations. \nsubmission_information_for_multiwfn = {}\nsubmission_information_for_multiwfn['cpus_per_task'] = 16\nsubmission_information_for_multiwfn['mem']           = '32GB'\nsubmission_information_for_multiwfn['time']          = '0-03:00'\nsubmission_information_for_multiwfn['partition']     = 'parallel'\nsubmission_information_for_multiwfn['constraint']    = 'AVX'\nsubmission_information_for_multiwfn['email']         = 'geoffreywealslurmnotifications@gmail.com'\n</code></pre>"},{"location":"Guide_to_Using_the_ECCP_Program/Using_The_ECCP_Program.html#dictionaries-needed-for-obtaining-structural-and-reorganisation-energies-re-input-files-for-monomers","title":"Dictionaries needed for obtaining structural and reorganisation energies (RE) input files for Monomers","text":"<p>If you would like to obtain the <code>Gaussian</code>/<code>ORCA</code> input files required for running structural optimisations and obtain ground and excited state energies, as well as to obtain reorganisation energies (RE), you will want to provide two dictionaries for the <code>re_file_creation_information</code> variable. These are:</p> <ul> <li><code>calculation_parameters_for_reorganisation_energy</code> (dict.): This dictionary contains information required for the <code>Gaussian</code>/<code>ORCA</code> files for performing RE calculations.</li> <li><code>submission_information_for_reorganisation_energy</code> (dict.): This dictionary contains information required for making the <code>submit.sl</code> file for submitting RE jobs to slurm. </li> </ul> <p>If you would like to perform RE calculations for the dimers, you want to set <code>re_file_creation_information</code> as:</p> <pre><code>re_file_creation_information = (calculation_parameters_for_reorganisation_energy, submission_information_for_reorganisation_energy)\n</code></pre> <p>See Calculation Parameter Settings and Submission Information Settings for more information about what settings you want to include in these dictionaries. </p> <p>If you do not want to perform RE calculations for the molcules, you want to set <code>re_file_creation_information = None</code>:</p> <pre><code>re_file_creation_information = None\n</code></pre> <p>Examples of the <code>calculation_parameters_for_reorganisation_energy</code> and <code>submission_information_for_reorganisation_energy</code> dictionaries as given below:</p> Examples of dictionaries needed for obtaining structural and reorganisation energies (RE) input files<pre><code># The following dictionaries provide the Gaussian/ORCA parameters and Submission information required for performing \n# reorganisation energy (RE) calculations on your molecules.\n\n# This dictionary will add tags to your Gaussian/ORCA input file.\ncalculation_parameters_for_reorganisation_energy = {}\ncalculation_parameters_for_reorganisation_energy['calc_software']    = 'Gaussian'\ncalculation_parameters_for_reorganisation_energy['mem']              = '256GB'\ncalculation_parameters_for_reorganisation_energy['method']           = calculation_parameters_for_atomic_transition_charges['method']\ncalculation_parameters_for_reorganisation_energy['basis']            = calculation_parameters_for_atomic_transition_charges['basis']\ncalculation_parameters_for_reorganisation_energy['td_settings']      = calculation_parameters_for_atomic_transition_charges['td_settings']\n#calculation_parameters_for_reorganisation_energy['temp_folder_path'] = calculation_parameters_for_atomic_transition_charges['temp_folder_path']\ncalculation_parameters_for_reorganisation_energy['extra']            = '# maxdisk=2TB scf=(xqc,maxcycle=512)'\n\n# This tag indicates if you want to obtain Gaussian/ORCA input files of molecules for performing ATC calculations. \nsubmission_information_for_reorganisation_energy = {}\nsubmission_information_for_reorganisation_energy['cpus_per_task']    = 128\nsubmission_information_for_reorganisation_energy['mem']              = '264GB' # This has been set to calculation_parameters_for_reorganisation_energy['mem'] + 24 GBs\nsubmission_information_for_reorganisation_energy['time']             = '10-00:00'\nsubmission_information_for_reorganisation_energy['partition']        = 'parallel'\nsubmission_information_for_reorganisation_energy['constraint']       = 'AVX'\nsubmission_information_for_reorganisation_energy['email']            = 'geoffreywealslurmnotifications@gmail.com'\nsubmission_information_for_reorganisation_energy['gaussian_version'] = 'gaussian/g16'\nsubmission_information_for_reorganisation_energy['python_version']   = 'python/3.8.1'\n</code></pre>"},{"location":"Guide_to_Using_the_ECCP_Program/Using_The_ECCP_Program.html#dictionaries-needed-for-obtaining-franck-condonhuang-rhys-factor-fchr-input-files-for-monomers","title":"Dictionaries needed for obtaining franck-condon/huang-rhys factor (FC/HR) input files for Monomers","text":"<p>If you would like to obtain input files for performing franck-condon/huang-rhys factor (FC/HR) calculations, you will want to provide the two dictionaries for the <code>re_file_creation_information</code> variable (see above) as well as two dictionaries for the <code>fc_file_creation_information</code> variable. These are:</p> <ul> <li><code>calculation_parameters_for_franck_condon_factors</code> (dict.): This dictionary contains information required for the <code>Gaussian</code>/<code>ORCA</code> files for performing FC/HR calculations.</li> <li><code>submission_information_for_franck_condon_factors</code> (dict.): This dictionary contains information required for making the <code>submit.sl</code> file for submitting FC/HR jobs to slurm. </li> </ul> <p>If you would like to perform FC/HR calculations for the dimers, you want to set <code>fc_file_creation_information</code> as:</p> <pre><code>fc_file_creation_information = (calculation_parameters_for_franck_condon_factors, submission_information_for_franck_condon_factors)\n</code></pre> <p>See Calculation Parameter Settings and Submission Information Settings for more information about what settings you want to include in these dictionaries. </p> <p>If you do not want to perform FC/HR calculations for the molcules, you want to set <code>fc_file_creation_information = None</code>:</p> <pre><code>fc_file_creation_information = None\n</code></pre> <p>Examples of the <code>calculation_parameters_for_franck_condon_factors</code> and <code>submission_information_for_franck_condon_factors</code> dictionaries as given below:</p> Examples of dictionaries needed for obtaining franck-condon/huang-rhys factor (FC/HR) input files<pre><code># The following dictionaries provide the Gaussian/ORCA parameters and Submission information required for performing \n# Franck-Condon (FC) (and Huang-Rhys (HR)) calculations on your molecules. \n# NOTE: If you want to use this, you also need to set Gaussian/ORCA parameters and submission information for obtaining reorganisation energies. \n\n# This dictionary will add tags to your Gaussian/ORCA input file.\ncalculation_parameters_for_franck_condon_factors = {}\ncalculation_parameters_for_franck_condon_factors['calc_software'] = 'Gaussian'\ncalculation_parameters_for_franck_condon_factors['mem']           = '8GB'\ncalculation_parameters_for_franck_condon_factors['method']        = calculation_parameters_for_atomic_transition_charges['method']\ncalculation_parameters_for_franck_condon_factors['basis']         = calculation_parameters_for_atomic_transition_charges['basis']\ncalculation_parameters_for_franck_condon_factors['extra']         = '# maxdisk=2TB scf=(xqc,maxcycle=512)'\n\n# This tag indicates if you want to obtain Gaussian/ORCA input files of molecules for performing FC calculations. \nsubmission_information_for_franck_condon_factors = {}\nsubmission_information_for_franck_condon_factors['cpus_per_task']    = 2\nsubmission_information_for_franck_condon_factors['mem']              = '16GB' # This has been set to calculation_parameters_for_reorganisation_energy['mem'] + 24 GBs\nsubmission_information_for_franck_condon_factors['time']             = '00-02:00'\nsubmission_information_for_franck_condon_factors['partition']        = 'quicktest'\nsubmission_information_for_franck_condon_factors['constraint']       = 'AVX'\nsubmission_information_for_franck_condon_factors['email']            = 'geoffreywealslurmnotifications@gmail.com'\nsubmission_information_for_franck_condon_factors['gaussian_version'] = 'gaussian/g16'\nsubmission_information_for_franck_condon_factors['python_version']   = 'python/3.8.1'\n</code></pre>"},{"location":"Guide_to_Using_the_ECCP_Program/Using_The_ECCP_Program.html#dictionaries-needed-for-obtaining-electronic-energy-transfer-eet-input-files-for-dimers","title":"Dictionaries needed for obtaining electronic energy transfer (EET) input files for Dimers","text":"<p>If you would like to obtain input files for performing electronic energy transfer (EET) calculations, you will want to provide two dictionaries for the <code>eet_file_creation_information</code> variable. These are:</p> <ul> <li><code>calculation_parameters_for_electronic_energy_transfer</code> (dict.): This dictionary contains information required for the <code>Gaussian</code>/<code>ORCA</code> files for performing EET calculations.</li> <li><code>submission_information_for_electronic_energy_transfer</code> (dict.): This dictionary contains information required for making the <code>submit.sl</code> file for submitting EET jobs to slurm. </li> </ul> <p>If you would like to perform EET calculations for the dimers, you want to set <code>eet_file_creation_information</code> as:</p> <pre><code>eet_file_creation_information = (calculation_parameters_for_electronic_energy_transfer, submission_information_for_electronic_energy_transfer)\n</code></pre> <p>See Calculation Parameter Settings and Submission Information Settings for more information about what settings you want to include in these dictionaries. </p> <p>If you do not want to perform EET calculations for the dimers, you want to set <code>eet_file_creation_information = None</code>:</p> <pre><code>eet_file_creation_information = None\n</code></pre> <p>Examples of the <code>calculation_parameters_for_electronic_energy_transfer</code> and <code>submission_information_for_electronic_energy_transfer</code> dictionaries as given below:</p> Examples of dictionaries needed for obtaining electronic energy transfer (EET) input files<pre><code># The following dictionaries provide the Gaussian/ORCA parameters and Submission information required for performing \n# Electronic Energy Transfer (EET) calculations on your molecules.\n\n# This dictionary will add tags to your Gaussian/ORCA .gjf file\ncalculation_parameters_for_electronic_energy_transfer = {}\ncalculation_parameters_for_electronic_energy_transfer['calc_software']                = 'Gaussian'\ncalculation_parameters_for_electronic_energy_transfer['mem']                          = '64GB'\ncalculation_parameters_for_electronic_energy_transfer['method']                       = calculation_parameters_for_atomic_transition_charges['method']\ncalculation_parameters_for_electronic_energy_transfer['basis']                        = calculation_parameters_for_atomic_transition_charges['basis']\ncalculation_parameters_for_electronic_energy_transfer['td_settings']                  = calculation_parameters_for_atomic_transition_charges['td_settings']\ncalculation_parameters_for_electronic_energy_transfer['obtain_excitation_amplitudes'] = False\n#calculation_parameters_for_electronic_energy_transfer['temp_folder_path']             = calculation_parameters_for_atomic_transition_charges['temp_folder_path']\ncalculation_parameters_for_electronic_energy_transfer['extra']                        = '# maxdisk=2TB scf=(xqc,maxcycle=512)'\n\n# This dictionary will add tags to your submit.sl file for performing Gaussian/ORCA Calculations to get the initial ATC wfn files and to perform EET calculations\nsubmission_information_for_electronic_energy_transfer = {}\nsubmission_information_for_electronic_energy_transfer['cpus_per_task']    = 32\nsubmission_information_for_electronic_energy_transfer['mem']              = '68GB' # This has been set to calculation_parameters_for_electronic_energy_transfer['mem'] + 12 GBs\nsubmission_information_for_electronic_energy_transfer['time']             = '10-00:00'\nsubmission_information_for_electronic_energy_transfer['partition']        = 'parallel'\nsubmission_information_for_electronic_energy_transfer['constraint']       = 'AVX'\nsubmission_information_for_electronic_energy_transfer['email']            = 'geoffreywealslurmnotifications@gmail.com'\nsubmission_information_for_electronic_energy_transfer['gaussian_version'] = 'gaussian/g16'\nsubmission_information_for_electronic_energy_transfer['python_version']   = 'python/3.8.1'\n</code></pre>"},{"location":"Guide_to_Using_the_ECCP_Program/Using_The_ECCP_Program.html#dictionaries-needed-for-obtaining-intermolecular-charge-transfer-ict-input-files-for-dimers","title":"Dictionaries needed for obtaining intermolecular charge transfer (ICT) input files for Dimers","text":"<p>Not Functioning Yet</p> <p>Intermolecular charge transfer coupling values can be obtained for charge transfer between monomers (in a dimer) by obtaining the eigendata from <code>Gaussian</code>/<code>ORCA</code> claculations upon the dimer and the two monomers that are apart of the dimer. This includes obtaining overlap intergral matrices, molecular orbital (MO) energies, and MO coefficients for the monomers and dimers found in this crystal.</p> <p>If you would like to obtain input files for performing intermolecular charge transfer (ICT) calculations, you will want to provide two dictionaries for the <code>dimer_eigendata_file_creation_information</code> variable. These are:</p> <ul> <li><code>calculation_parameters_for_eigendata</code> (dict.): This dictionary contains information required for the <code>Gaussian</code>/<code>ORCA</code> files for obtaining eigendata from your monomers and dimers, required for obtaining ICT coupling values.</li> <li><code>submission_information_for_eigendata</code> (dict.): This dictionary contains information required for making the <code>submit.sl</code> file for submitting eigendata gathering jobs to slurm. </li> </ul> <p>If you would like to perform ICT calculations for the dimers, you want to set <code>ict_file_creation_information</code> as:</p> <pre><code>ict_file_creation_information = (calculation_parameters_for_intermolecular_charge_transfer, submission_information_for_intermolecular_charge_transfer)\n</code></pre> <p>See Calculation Parameter Settings and Submission Information Settings for more information about what settings you want to include in these dictionaries. </p> <p>If you do not want to perform ICT calculations for the dimers, you want to set <code>ict_file_creation_information = None</code>:</p> <pre><code>ict_file_creation_information = None\n</code></pre> <p>NOTE: Both <code>calculation_parameters_for_intermolecular_charge_transfer</code> and <code>submission_information_for_intermolecular_charge_transfer</code> are usually the same as  <code>calculation_parameters_for_electronic_energy_transfer</code> and <code>submission_information_for_electronic_energy_transfer</code>, respectively. See below for examples of <code>calculation_parameters_for_intermolecular_charge_transfer</code> and <code>submission_information_for_intermolecular_charge_transfer</code>: </p> Examples of dictionaries needed for obtaining intermolecular charge transfer (ICT) input files<pre><code># The following dictionaries provide the Gaussian/ORCA parameters and Submission information required for obtaining \n# eigendata (such as overlap orbtials and molecular orbital energies and coefficients).\n\n# This dictionary will add tags to your Gaussian/ORCA input file\ncalculation_parameters_for_eigendata = dict(calculation_parameters_for_electronic_energy_transfer)\n\n# This dictionary will add tags to your submit.sl file for performing Gaussian/ORCA Calculations to obtain eigendata.\nsubmission_information_for_eigendata = dict(submission_information_for_electronic_energy_transfer)\n</code></pre>"},{"location":"Guide_to_Using_the_ECCP_Program/Using_The_ECCP_Program.html#examples-of-input-files","title":"Examples of Input Files","text":"<p>The folder called <code>Examples</code> contains all the files that are needed to run the ECCP program. This includes examples of the <code>Run_ECCP.py</code> file. Click here to access these files on Github.</p>"}]}